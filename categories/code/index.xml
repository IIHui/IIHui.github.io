<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>code on Keep It Simple</title>
    <link>https://IIHui.github.io/categories/code/</link>
    <description>Recent content in code on Keep It Simple</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Thu, 07 Mar 2019 09:28:12 +0000</lastBuildDate>
    
	<atom:link href="https://IIHui.github.io/categories/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GCD</title>
      <link>https://IIHui.github.io/post/ios-dispatchqueue/</link>
      <pubDate>Thu, 07 Mar 2019 09:28:12 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-dispatchqueue/</guid>
      <description>参考资料 参考资料1 参考资料2</description>
    </item>
    
    <item>
      <title>手动部署包</title>
      <link>https://IIHui.github.io/post/ios-package-version/</link>
      <pubDate>Tue, 05 Mar 2019 15:52:41 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-package-version/</guid>
      <description>今天因流水线的自动部署故障，又加上项目中引入了百度语音合成，超过了100M，因此需要手动将打好的包传到后台服务器，然后设置这个包有效，这个过</description>
    </item>
    
    <item>
      <title>第三方库放到Cocoapods中</title>
      <link>https://IIHui.github.io/post/ios-cocoapods-storage/</link>
      <pubDate>Fri, 01 Mar 2019 09:34:41 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-cocoapods-storage/</guid>
      <description>因项目需要引用百度语音合成SDK，但这个第三方库的.a文件过于庞大，按规定不能直接放到项目中，需要放到项目依赖的Cocoapods仓库中。因</description>
    </item>
    
    <item>
      <title>引入百度语音合成</title>
      <link>https://IIHui.github.io/post/ios-baidusynthesizer/</link>
      <pubDate>Thu, 28 Feb 2019 11:08:15 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-baidusynthesizer/</guid>
      <description>因项目中需要用到百度语音合成SDK，因此自己先建了一个工程作为引入测试，总结下来为准备&amp;ndash;&amp;gt;导入&amp;ndash;&amp;gt;创建应</description>
    </item>
    
    <item>
      <title>H5视频播放</title>
      <link>https://IIHui.github.io/post/ios-html-player/</link>
      <pubDate>Mon, 25 Feb 2019 08:52:09 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-html-player/</guid>
      <description>最近APP出现了在iPhone上拍的视频，同步到Android手机后播放不了的问题，第一感觉应该是iPhone上录制视频所使用的编码不兼容A</description>
    </item>
    
    <item>
      <title>半透明的悬浮提示窗</title>
      <link>https://IIHui.github.io/post/ios-alert-window/</link>
      <pubDate>Sun, 24 Feb 2019 19:50:43 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-alert-window/</guid>
      <description>因项目中需要一个悬浮提示窗，从网上找到一篇以OC为示例的文章，因为公司项目是Swift写的，因此需要将OC转为Swift。 OC代码 .h文件 //CustomAlertWindow.h</description>
    </item>
    
    <item>
      <title>UIWebview 加载含特殊字符网页</title>
      <link>https://IIHui.github.io/post/ios-webview-html/</link>
      <pubDate>Sun, 24 Feb 2019 18:57:05 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-webview-html/</guid>
      <description>UIWebview中加载的html文件中如果含有\n,&#39;等特殊字符时，显示为一片空白，通过查阅资料得知需要将这些特殊字符进行预处理。 预处理 class</description>
    </item>
    
    <item>
      <title>JS事件捕获</title>
      <link>https://IIHui.github.io/post/js-event/</link>
      <pubDate>Fri, 25 Jan 2019 11:13:43 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/js-event/</guid>
      <description>DOM事件从发生到开始经历了三个阶段，分别为捕获阶段、命中阶段以及冒泡阶段。捕获阶段表示从最上层开始，直到最下层(点击的那个target元素</description>
    </item>
    
    <item>
      <title>Unicode简介</title>
      <link>https://IIHui.github.io/post/cs-unicode/</link>
      <pubDate>Thu, 24 Jan 2019 08:54:16 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/cs-unicode/</guid>
      <description>计算机只认识0101...这样的串，但是人眼看0101这样的串比较麻烦，为了方便人们阅读，我们通常使用十进制、八进制、十六进制来标识一个数字</description>
    </item>
    
    <item>
      <title>HTTP 网络请求</title>
      <link>https://IIHui.github.io/post/ios-network-tcp/</link>
      <pubDate>Fri, 18 Jan 2019 09:37:41 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-network-tcp/</guid>
      <description>参考资料 参考资料</description>
    </item>
    
    <item>
      <title>创建新的Target</title>
      <link>https://IIHui.github.io/post/ios-new-target/</link>
      <pubDate>Thu, 10 Jan 2019 11:18:46 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-new-target/</guid>
      <description>因项目需要新建一条众测流水线，因此首先需要基于DEV环境新建一个Target，然后将新建的Target对配置到新建的流水线上。 Duplicate 新Targe</description>
    </item>
    
    <item>
      <title>Range的保存与恢复</title>
      <link>https://IIHui.github.io/post/js-focus-save/</link>
      <pubDate>Wed, 09 Jan 2019 16:58:44 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/js-focus-save/</guid>
      <description>在iOS 11.3以下的UIWebview中插入图片时，因图片选择器的弹出导致UIWebview失去焦点，故在插入图片前需先保存图片将要插入的</description>
    </item>
    
    <item>
      <title>Swift访问权限</title>
      <link>https://IIHui.github.io/post/ios-access-control/</link>
      <pubDate>Wed, 09 Jan 2019 09:18:25 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-access-control/</guid>
      <description>访问权限用于限制部分代码被其它源文件或者模块访问，目的是隐藏某些代码的实现细节。在Swift中可以设置类型(类、结构和枚举)的访问权限，也可</description>
    </item>
    
    <item>
      <title>img添加和取消点击监听</title>
      <link>https://IIHui.github.io/post/js-image-addclicklistener/</link>
      <pubDate>Tue, 08 Jan 2019 19:46:39 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/js-image-addclicklistener/</guid>
      <description>一篇图文笔记可能有多张图片，目前的需求为单击图片后开始预览图片。想到的解决思路有两种，第一种是为每张图片添加点击事件的监听，这种方式的麻烦在</description>
    </item>
    
    <item>
      <title>img点击监听</title>
      <link>https://IIHui.github.io/post/js-image-clickedlistener/</link>
      <pubDate>Tue, 08 Jan 2019 19:46:39 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/js-image-clickedlistener/</guid>
      <description>一篇图文笔记可能有多张图片，目前的需求为单击图片后开始预览图片。想到的解决思路有两种，第一种是为每张图片添加点击事件的监听，这种方式的麻烦在</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://IIHui.github.io/post/ios-swift-singleton/</link>
      <pubDate>Mon, 07 Jan 2019 23:29:33 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-swift-singleton/</guid>
      <description>单例模式(Singleton Pattern)属于创建型模式，该模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有一个单例对象被创建</description>
    </item>
    
    <item>
      <title>基于PageController的图片预览</title>
      <link>https://IIHui.github.io/post/ios-image-preview/</link>
      <pubDate>Sat, 05 Jan 2019 11:49:11 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-image-preview/</guid>
      <description>参考资料 参考资料 参考资料 参考资料</description>
    </item>
    
    <item>
      <title>LLDB 调试</title>
      <link>https://IIHui.github.io/post/ios-debug/</link>
      <pubDate>Fri, 04 Jan 2019 14:15:45 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-debug/</guid>
      <description>LLDB是一个庞大的工具,内置了许多有用的命令。 命令语法结构 &amp;lt;command&amp;gt; [&amp;lt;subcommand&amp;gt; [&amp;lt;subcommand&amp;gt;...]] &amp;lt;action&amp;gt; [-options [option-value]] [argument [argument...]] 其中： command和subcommand为LLDB调试命令的名</description>
    </item>
    
    <item>
      <title>多图片选择</title>
      <link>https://IIHui.github.io/post/ios-image-selector/</link>
      <pubDate>Fri, 04 Jan 2019 09:51:58 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-image-selector/</guid>
      <description>第一步 JSAPI中有个文件选择器，而文件选择器中有选择多个图片的功能。首先在WebviewController.swift中找到: case UrlSchema.fileSelectorSchema.rawValue: //文</description>
    </item>
    
    <item>
      <title>Swift中for-in的各种姿势</title>
      <link>https://IIHui.github.io/post/swift-for-in/</link>
      <pubDate>Fri, 04 Jan 2019 08:16:45 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/swift-for-in/</guid>
      <description>Swift中只有一种形式的for循环，即for-in。但是for-in有多种形式，包括常规用法和区间循环。 常规用法 常规用法一般用于直接访问数</description>
    </item>
    
    <item>
      <title>iOS允许HTTP请求</title>
      <link>https://IIHui.github.io/post/ios-http/</link>
      <pubDate>Sat, 29 Dec 2018 11:05:00 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-http/</guid>
      <description>在iOS 9之后，苹果默认要求App访问的url必须为https的安全链接，为了能在项目中请求Http链接，需要在项目中自动生成的Info.p</description>
    </item>
    
    <item>
      <title>AFNetworking 使用</title>
      <link>https://IIHui.github.io/post/ios-anfnetworking/</link>
      <pubDate>Fri, 28 Dec 2018 21:08:45 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-anfnetworking/</guid>
      <description>AFNetworking是为OS X和iOS设计的一套网络框架，对NSURLConnection和NSURLSession做了封装，提供了丰富</description>
    </item>
    
    <item>
      <title>笔记剥离</title>
      <link>https://IIHui.github.io/post/ios-note-peel/</link>
      <pubDate>Wed, 26 Dec 2018 11:28:32 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-note-peel/</guid>
      <description>需要处理的 集成百度语音到Framework，应当集成到基础模块 集成百度地图到Framework中，应该以接口的形式抽取出来 数据库剥离 用户数据</description>
    </item>
    
    <item>
      <title>Framework</title>
      <link>https://IIHui.github.io/post/ios-framework/</link>
      <pubDate>Tue, 25 Dec 2018 11:45:01 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-framework/</guid>
      <description>链接库 库是一种共享程序代码的方式，分为静态库和动态库。静态库链接时被完整地拷贝到可执行文件，多次使用时就会有多个副本。 而动态库在链接时不复制</description>
    </item>
    
    <item>
      <title>桥接文件</title>
      <link>https://IIHui.github.io/post/ios-bridge/</link>
      <pubDate>Mon, 24 Dec 2018 23:41:52 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-bridge/</guid>
      <description>因为历史原因，在使用Swift编程时，常常需要用到OC类中的方法，此时就需要使用桥接文件来引入OC中的头文件，以告诉Swift。 手动创建桥接</description>
    </item>
    
    <item>
      <title>WKWebView</title>
      <link>https://IIHui.github.io/post/ios-wkwebview/</link>
      <pubDate>Mon, 24 Dec 2018 08:47:19 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-wkwebview/</guid>
      <description>使用 self.webView.scrollView.addObserver(self, forKeyPath: &amp;#34;contentSize&amp;#34;, options: .new, context: nil) } override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) { if let key = keyPath, key == &amp;#34;contentSize&amp;#34;{ let fittingSize = self.webView.sizeThatFits(CGSize.zero) self.webView.frame = CGRect(x: 0, y: noteTitleTextField.frame.height, width: fittingSize.width, height: fittingSize.height) } }</description>
    </item>
    
    <item>
      <title>JS的prototype</title>
      <link>https://IIHui.github.io/post/js-prototype/</link>
      <pubDate>Thu, 20 Dec 2018 19:43:47 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/js-prototype/</guid>
      <description>在JS中，每当定义一个对象(函数也是对象)时，对象中都会包含一些预定义的属性；每个对象都有一个prototype对象，这个属性指向函数的原型</description>
    </item>
    
    <item>
      <title>iOS 版本检查</title>
      <link>https://IIHui.github.io/post/ios-new-version/</link>
      <pubDate>Thu, 20 Dec 2018 11:53:15 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-new-version/</guid>
      <description>首先由AboutViewController中的presenter调用其requestLastestVersion方法，而presenter</description>
    </item>
    
    <item>
      <title>javascript 中this指针</title>
      <link>https://IIHui.github.io/post/js-this/</link>
      <pubDate>Wed, 19 Dec 2018 15:59:17 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/js-this/</guid>
      <description>在JavaScript中，this是动态绑定，或称为运行期绑定的，这导致JavaScript中的this关键字具有多重含义。它可以是全局对象</description>
    </item>
    
    <item>
      <title>html 元素分类</title>
      <link>https://IIHui.github.io/post/html-element-category/</link>
      <pubDate>Wed, 19 Dec 2018 10:48:17 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/html-element-category/</guid>
      <description>元素分类 HTML元素，指的是从开始标签(start tag)到结束标签(end tag)的所有代码。 HTML元素包括顶级元素，块级元素，内联元素</description>
    </item>
    
    <item>
      <title>盒子模型</title>
      <link>https://IIHui.github.io/post/html-box-model/</link>
      <pubDate>Tue, 18 Dec 2018 10:39:23 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/html-box-model/</guid>
      <description>W3C组织建议把网页上所有的对象都放在一个盒(box)中，设计师可以在对象创建时控制这个盒子的属性，这些对象包括段落、列表、标题、图片以及层</description>
    </item>
    
    <item>
      <title>selection 对象</title>
      <link>https://IIHui.github.io/post/js-selection/</link>
      <pubDate>Mon, 17 Dec 2018 16:46:24 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/js-selection/</guid>
      <description>在富文本编辑器中，需要控制光标的各种状态信息，位置信息。浏览器提供了selection对象和range对象来操作光标。 selection Selection对</description>
    </item>
    
    <item>
      <title>KVO 简介</title>
      <link>https://IIHui.github.io/post/ios-kvo/</link>
      <pubDate>Mon, 17 Dec 2018 15:09:08 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-kvo/</guid>
      <description>在OC中KVO(key-value observing)是一种通知机制，定义了一种对象之间监控对方状态，并做出相应动作的机制。当指定的被观察者</description>
    </item>
    
    <item>
      <title>UITableView</title>
      <link>https://IIHui.github.io/post/ios-uitableview/</link>
      <pubDate>Mon, 17 Dec 2018 14:08:45 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-uitableview/</guid>
      <description>UITableView可以显示多行多组数据,创建表格视图有两种风格，一种为Plain，另一种为Grouped。 点击不变色 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell {</description>
    </item>
    
    <item>
      <title>给图片添加点击监听</title>
      <link>https://IIHui.github.io/post/js-img/</link>
      <pubDate>Mon, 17 Dec 2018 08:34:15 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/js-img/</guid>
      <description>给所有图片添加监听 function setImagesClick(){ $(&amp;#39;body&amp;#39;).on(&amp;#39;click&amp;#39;,&amp;#39;img&amp;#39;,function(){ let position = this.offsetTop; //当前元素距离顶部的距离 //window.scrollTo(0,position) let result = {}; result.position = position.toString() let jsonString = JSON.stringify(result); let escapedJsonString = encodeURI(jsonString); //重新编码 let scheme = &amp;#34;position://&amp;#34;; document.location.href = scheme + &amp;#34;#&amp;#34; + escapedJsonString; //向ios发送</description>
    </item>
    
    <item>
      <title>AVPlayer播放</title>
      <link>https://IIHui.github.io/post/ios-avplayer/</link>
      <pubDate>Fri, 14 Dec 2018 10:54:44 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-avplayer/</guid>
      <description>监听AVPlayer播放结束 NotificationCenter.default.addObserver(self, selector: #selector(handlerPlayerFinish), name: NSNotification.Name.AVPlayerItemDidPlayToEndTime, object: self.playerItem) self.playerItem = AVPlayerItem(url: outputFileURL) self.avPlayer = AVPlayer(playerItem: self.playerItem)</description>
    </item>
    
    <item>
      <title>RunLoop</title>
      <link>https://IIHui.github.io/post/ios-runloop/</link>
      <pubDate>Fri, 14 Dec 2018 08:21:26 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-runloop/</guid>
      <description>概念 一般来讲，一个线程一次只能执行一个任务，执行完成后，线程就会退出。若我们需要一个机制，让线程能随时处理事件但并不退出，通常的代码逻辑是下</description>
    </item>
    
    <item>
      <title>权限检查</title>
      <link>https://IIHui.github.io/post/ios-authority/</link>
      <pubDate>Thu, 13 Dec 2018 20:25:33 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-authority/</guid>
      <description>相机权限检查 相机和音频的权限分为4种，分别是.denied,restricted,.authorized,.notDetermined,.a</description>
    </item>
    
    <item>
      <title>透明度渐变动画</title>
      <link>https://IIHui.github.io/post/ios-animation/</link>
      <pubDate>Thu, 13 Dec 2018 10:50:31 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-animation/</guid>
      <description>CABasicAnimation关键帧动画 所谓关键帧动画，就是将Layer的属性作为KeyPath来注册，只要指定动画的起始帧和结束帧，然后</description>
    </item>
    
    <item>
      <title>透明度渐变动画</title>
      <link>https://IIHui.github.io/post/ios-opicity-animation/</link>
      <pubDate>Thu, 13 Dec 2018 10:50:31 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-opicity-animation/</guid>
      <description>CABasicAnimation关键帧动画 所谓关键帧动画，就是将Layer的属性作为KeyPath来注册，只要指定动画的起始帧和结束帧，然后</description>
    </item>
    
    <item>
      <title>Gif的播放与暂停</title>
      <link>https://IIHui.github.io/post/ios-gif/</link>
      <pubDate>Thu, 13 Dec 2018 08:25:45 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-gif/</guid>
      <description>Gif的播放有两种方式，一种是通过UIWebview；一种是通过UIImageView的方式。使用UIWebview的缺点是不可以暂停。 UIWebView import</description>
    </item>
    
    <item>
      <title>iOS视频开发入门</title>
      <link>https://IIHui.github.io/post/ios-video/</link>
      <pubDate>Wed, 12 Dec 2018 10:55:40 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-video/</guid>
      <description>视频实质 纯粹的视频（不包括音频）实质上就是一组帧图片，经过视频编码成为视频(video)文件再把音频（audio）文件以及字幕文件组装在一起</description>
    </item>
    
    <item>
      <title>HTML入门</title>
      <link>https://IIHui.github.io/post/htm-primer/</link>
      <pubDate>Thu, 06 Dec 2018 19:22:27 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/htm-primer/</guid>
      <description>简介 HTML指的是超文本标记语言 (Hyper Text Markup Language)，它不是一种编程语言，而是一种标志语言，标记语言是一套标记标签，使用标记标签来描述网</description>
    </item>
    
    <item>
      <title>CSS入门</title>
      <link>https://IIHui.github.io/post/css-primer/</link>
      <pubDate>Thu, 06 Dec 2018 10:43:48 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/css-primer/</guid>
      <description>关注点分离 关注点分离的意思是：各种技术只负责自己的领域，不要混合在一起，形成耦合。对于网页开发来说，主要是三种技术分离。 HTML:负责网页的</description>
    </item>
    
    <item>
      <title>XCode快捷键</title>
      <link>https://IIHui.github.io/post/xcode-quick/</link>
      <pubDate>Tue, 27 Nov 2018 15:20:06 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/xcode-quick/</guid>
      <description>MAC键盘图标 ⌘——Command () ⌃ ——Control ⌥——Option (alt) ⇧——Shift ⇪——Caps Lock 快捷键 Command+R 运行 Command+B 编译 Command+. 停止 Command +</description>
    </item>
    
    <item>
      <title>OC 入门</title>
      <link>https://IIHui.github.io/post/oc-tour/</link>
      <pubDate>Wed, 19 Sep 2018 14:29:51 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/oc-tour/</guid>
      <description>Objective-C 是C语言的严格超集——任何C语言程序不经过修改都可以直接通过OC的编译器，在OC中使用C语言代码也是完全合法的。Objective-C被描</description>
    </item>
    
    <item>
      <title>swift中的方法</title>
      <link>https://IIHui.github.io/post/swift-method/</link>
      <pubDate>Fri, 14 Sep 2018 09:31:40 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/swift-method/</guid>
      <description>方法是关联了特定类型的函数。类，结构体，枚举类型都能定义实例方法，方法封装了给定类型特定的任务和功能。 实例方法 实例方法是属于特定实例（类实例</description>
    </item>
    
    <item>
      <title>JavaScript 数据类型</title>
      <link>https://IIHui.github.io/post/js-data-struct/</link>
      <pubDate>Mon, 20 Aug 2018 21:57:31 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/js-data-struct/</guid>
      <description>JavaScript不需要进行类型声明，因此它是一种弱类型的语言，这意味着可以在任何阶段改变变量的数据类型。 字符串 字符串是由零个或者多个字符</description>
    </item>
    
    <item>
      <title>git使用</title>
      <link>https://IIHui.github.io/post/tool-git-usage/</link>
      <pubDate>Mon, 25 Jun 2018 09:36:27 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/tool-git-usage/</guid>
      <description>本地.git文件太大 本地.git文件太大可以使用git gc命令压缩：</description>
    </item>
    
    <item>
      <title>Go 实现各种内排序算法</title>
      <link>https://IIHui.github.io/post/go-sort/</link>
      <pubDate>Mon, 28 May 2018 12:13:06 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-sort/</guid>
      <description>内排序是指在排序过程中，数据都能够放在内存中处理，排序时不涉及数据的内、外交换。 插入类排序 直接插入排序 func InsertSort(data []int) { var i, j, cur int length := len(data) //获得切片对</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 常见知识点</title>
      <link>https://IIHui.github.io/post/cpp-base/</link>
      <pubDate>Sat, 05 May 2018 17:24:44 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/cpp-base/</guid>
      <description>static的作用 对普通函数和全局变量而言static具有隐藏作用：将其修饰的全局变量和函数的作用域限定在本文件中。不加static修饰的函</description>
    </item>
    
    <item>
      <title>Go 标签</title>
      <link>https://IIHui.github.io/post/go-label/</link>
      <pubDate>Mon, 06 Nov 2017 16:11:37 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-label/</guid>
      <description>在for,switch或者select中都可以配合标签形式的标识符使用——某一行第一个以冒号结尾的单词（因为gofmt会自动将后续代码移动至</description>
    </item>
    
    <item>
      <title>Go 中if语句</title>
      <link>https://IIHui.github.io/post/go-if/</link>
      <pubDate>Thu, 02 Nov 2017 19:53:47 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-if/</guid>
      <description>if是用于测试某个条件（布尔型，又被称为逻辑型）的语句，如果该条件成立，则会执行if后由大括号括起来的代码块，否则就忽略该代码块继续执行后续</description>
    </item>
    
    <item>
      <title>C&#43;&#43;智能指针</title>
      <link>https://IIHui.github.io/post/cpp-smart-pointer/</link>
      <pubDate>Sun, 13 Aug 2017 16:01:53 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/cpp-smart-pointer/</guid>
      <description>智能指针是一个类，它对普通指针进行封装，使智能指针类对象具有普通指针类型一样的操作。具体而言，复制对象时，副本和原对象都指向同一存储区域，如</description>
    </item>
    
    <item>
      <title>Go 中映射(字典）</title>
      <link>https://IIHui.github.io/post/go-map/</link>
      <pubDate>Sat, 05 Aug 2017 19:25:17 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-map/</guid>
      <description>映射(或称为字典)是一种数据结构，用于存储一系列无序的键值对，它是基于键来存储值。映射的键可以是任何值，只要这个值可以使用==运算符做比较即</description>
    </item>
    
    <item>
      <title>Go 切片</title>
      <link>https://IIHui.github.io/post/go-slice/</link>
      <pubDate>Fri, 04 Aug 2017 15:37:58 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-slice/</guid>
      <description>定义 切片是围绕动态数组的概念来构建的，但是本身并非动态数组或数组指针，它通过内部指针引用底层数组，设定相关属性，将数据读写操作限定到指定区域</description>
    </item>
    
    <item>
      <title>Go 数组</title>
      <link>https://IIHui.github.io/post/go-array/</link>
      <pubDate>Thu, 03 Aug 2017 15:11:37 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-array/</guid>
      <description>定义 在Go语言里，数组是一个长度固定的数据类型，用于连续存储多个具有相同的类型的元素。数组存储的类型可以是内置类型，如整型或者字符串，也可以</description>
    </item>
    
    <item>
      <title>Go 未命名类型</title>
      <link>https://IIHui.github.io/post/go-undef-type/</link>
      <pubDate>Thu, 03 Aug 2017 11:04:39 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-undef-type/</guid>
      <description>未命名类型 在Go中数组、切片、字典、通道类型与具体元素类型或长度属性相关，故被称为未命名类型。具有相同声明的未命名类型被称为同一类型，在 Go 中</description>
    </item>
    
    <item>
      <title>Go 接口</title>
      <link>https://IIHui.github.io/post/go-interface/</link>
      <pubDate>Wed, 02 Aug 2017 09:13:45 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-interface/</guid>
      <description>接口定义 接口代表一种调用契约，是多个方法声明的集合。在某些动态语言中接口(interface)也被称为协议(protocol)。准备交互的双</description>
    </item>
    
    <item>
      <title>Go 定义类型</title>
      <link>https://IIHui.github.io/post/go-struct/</link>
      <pubDate>Tue, 01 Aug 2017 09:43:30 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-struct/</guid>
      <description>值的类型给编译器提供两部分信息：①需要分配多少内存给这个值；②这段内存表示什么。Go语言允许用户定义类型，当用户声明一个新类型时，这个声明就</description>
    </item>
    
    <item>
      <title>Go 延迟调用</title>
      <link>https://IIHui.github.io/post/go-defer/</link>
      <pubDate>Mon, 31 Jul 2017 08:55:09 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-defer/</guid>
      <description>关键字defer允许我们推迟到函数返回前一刻(或任意位置执行return语句之后)才执行某个语句或函数。 为什么要在返回之后才执行这些语句？因</description>
    </item>
    
    <item>
      <title>Go 方法</title>
      <link>https://IIHui.github.io/post/go-method/</link>
      <pubDate>Sun, 30 Jul 2017 21:06:07 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-method/</guid>
      <description>方法 在Go中结构体就像是类的一种简化形式，方法就像类中的方法。方法是与对象实例绑定的特殊函数，方法和函数定义语法区别在于:方法有前置实例接收</description>
    </item>
    
    <item>
      <title>Go 包</title>
      <link>https://IIHui.github.io/post/go-package/</link>
      <pubDate>Sat, 29 Jul 2017 10:02:56 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-package/</guid>
      <description>包是结构化的一种方式,所有Go语言的程序都会组织成若干组文件，每组文件被称为一个包。每个文件都属于且仅属于一个包，一个包中可以包含许多以.g</description>
    </item>
    
    <item>
      <title>Go 数据</title>
      <link>https://IIHui.github.io/post/go-data/</link>
      <pubDate>Fri, 28 Jul 2017 10:32:19 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-data/</guid>
      <description>数据类型 Go 中数据分为基本类型，数组，引用，字典（映射)，通道，函数，结构体，接口等等。 切片slice可实现类似动态数组的功能y := make([]int, 0, 5); app</description>
    </item>
    
    <item>
      <title>Go 函数</title>
      <link>https://IIHui.github.io/post/go-func/</link>
      <pubDate>Thu, 27 Jul 2017 21:58:12 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-func/</guid>
      <description>Go中有3种类型的函数，第一种是普通带名字的函数，第二种是匿名函数(或者被称为lambda函数)，第三种是方法（含有接收者的特殊函数）。 特点</description>
    </item>
    
    <item>
      <title>Go 表达式</title>
      <link>https://IIHui.github.io/post/go-expression/</link>
      <pubDate>Wed, 26 Jul 2017 20:14:46 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-expression/</guid>
      <description>运算符 在Go中，一元运算符优先级最高，二元则分为5个级别，二元运算符遵循相同优先级从左到右依次计算，二元运算符从高到低的5个等级为： * / % &amp;lt;&amp;lt;</description>
    </item>
    
    <item>
      <title>Go 枚举</title>
      <link>https://IIHui.github.io/post/go-iota/</link>
      <pubDate>Tue, 25 Jul 2017 09:50:43 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-iota/</guid>
      <description>Go中没有定义枚举变量，但是可以借助iota来生成一组自增常量值来实现枚举，iota是一个比较奇怪的存在，它只能用在const的声明中，是一</description>
    </item>
    
    <item>
      <title>Go 常量</title>
      <link>https://IIHui.github.io/post/go-const/</link>
      <pubDate>Tue, 25 Jul 2017 09:45:49 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-const/</guid>
      <description>常量是一种表达式，其可以保证在编译阶段计算出表达式的值，并不需要等到运行时，从而使编译器得以知晓其值。所有常量本质上都属于基本类型：布尔型，</description>
    </item>
    
    <item>
      <title>Go 变量定义</title>
      <link>https://IIHui.github.io/post/go-var/</link>
      <pubDate>Mon, 24 Jul 2017 14:11:26 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-var/</guid>
      <description>Go中每一个文件都以package声明开头，表明文件属于哪一个包。package声明后面是import声明，然后是不区分顺序的包级别的类型，</description>
    </item>
    
    <item>
      <title>Go 基本类型</title>
      <link>https://IIHui.github.io/post/go-type/</link>
      <pubDate>Mon, 24 Jul 2017 10:34:44 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/go-type/</guid>
      <description>Go语言中定义了清晰完备的预定义基本类型（共21类），使得开发跨平台应用时无须过多考虑符号和长度差异，具体如下表： ![c600](http:</description>
    </item>
    
  </channel>
</rss>