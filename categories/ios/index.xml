<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS on Keep It Simple</title>
    <link>https://iihui.github.io/categories/ios/</link>
    <description>Recent content in iOS on Keep It Simple</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 20 Feb 2021 19:05:10 +0000</lastBuildDate><atom:link href="https://iihui.github.io/categories/ios/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Cookie简介</title>
      <link>https://iihui.github.io/post/cookie/</link>
      <pubDate>Sat, 20 Feb 2021 19:05:10 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/cookie/</guid>
      <description>简介 标准的http协议是无状态的，即服务端对于客户端的每次请求都认为它是一个新的请求，上一次的会话和下一次的会话之间没有任何联系。当用户访问服务端并进行登录后，之后的客户端请求服务端依然无法对其身份进行识别。如果将客户端与服务器之间的多次交</description>
    </item>
    
    <item>
      <title>UIView 使用</title>
      <link>https://iihui.github.io/post/ios-uiview/</link>
      <pubDate>Sun, 07 Feb 2021 12:53:06 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-uiview/</guid>
      <description>layoutIfNeeded与setNeedsLayout setNeedsLayout setNeedsLayout当需要调整UIView子视图布局时，需要在主线程调用此方法。此方法记录调整布局请求并立即返回「即异步执行」，等待下一个更新周期更新视图。也就是说，这个方</description>
    </item>
    
    <item>
      <title>PromiseKit使用</title>
      <link>https://iihui.github.io/post/ios-promisekit/</link>
      <pubDate>Wed, 03 Feb 2021 10:33:04 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-promisekit/</guid>
      <description>PromiseKit是简化异步编程的一种非必要方式，使用它可以提高代码的可读性和维护性，让代码更加优雅，它主要用于解决回调地狱问题。 回调地狱 为了保证异步代码按顺序执行，通常将异步代码嵌套在回调函数中。如果异步方法过多，就会产生过多的回调，一</description>
    </item>
    
    <item>
      <title>属性包装</title>
      <link>https://iihui.github.io/post/ios-propertywrapper/</link>
      <pubDate>Fri, 08 Jan 2021 18:19:29 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-propertywrapper/</guid>
      <description>属性包装器propertyWrapper的作用对象是属性，它的思想是只可以通过wrappedValue的get和set方法来访问属性，这样就可以通过get和set方法来对属性进行包装。属性包装器是一种通用结构，它封装了wrappedValu</description>
    </item>
    
    <item>
      <title>KSCrash</title>
      <link>https://iihui.github.io/post/ios-kscrash/</link>
      <pubDate>Sat, 26 Dec 2020 17:33:11 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-kscrash/</guid>
      <description>KSCrash是知名的崩溃日志收集框架。总共分为三个部分，Crash Recording，Crash Reporting以及Installation。其中Installation用来启动KSCrash，并且指定Crash收集的方式。Crash收</description>
    </item>
    
    <item>
      <title>UIScene不能使用UIAlertView</title>
      <link>https://iihui.github.io/post/ios-uiscene/</link>
      <pubDate>Fri, 25 Dec 2020 15:44:48 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-uiscene/</guid>
      <description>测试KSCrash时使用XCode 12.3新建了一个工程，写了相关测试代码之后报UIAlertView is deprecated and unavailable for UIScene based applications, please use UIAlertController错误，然后参照stackover上的回答，解决了报错问题。 第一步 解决这个问题的核心是</description>
    </item>
    
    <item>
      <title>Shell 常用命令</title>
      <link>https://iihui.github.io/post/shell-base/</link>
      <pubDate>Sun, 29 Nov 2020 10:50:55 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/shell-base/</guid>
      <description>本文记录工作中用的shell命令，以便下次使用的时候查阅。 软链接 创建 ln ~/.cocoapods/repos-art/CocoaPods-cmb ~/.cocoapods/repos 删除 unlink cocoaPods-github</description>
    </item>
    
    <item>
      <title>Python 基础</title>
      <link>https://iihui.github.io/post/python-base/</link>
      <pubDate>Mon, 23 Nov 2020 23:36:18 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/python-base/</guid>
      <description>字符串 在python中，用引号括起来的都是字符串，其中的引号可以是单引号，也可以是双引号。对于字符串，title()函数以首字母大写的方式显示每个单词；upper()函数将字符串全部转为大写；lower()函数将字符串全部转为小写。 lstr</description>
    </item>
    
    <item>
      <title>Swift Tips</title>
      <link>https://iihui.github.io/post/swift-tips/</link>
      <pubDate>Thu, 12 Nov 2020 08:27:33 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-tips/</guid>
      <description>柯里化 柯里化(curry)：把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下参数而且返回结果的新函数。 func addTo(_ adder: Int) -&amp;gt; (Int) -&amp;gt; Int { return { num in return num + adder } } let addTwo = addTo(2) // addTwo: Int -&amp;gt; Int let result = addTwo(6) // result = 8 柯⾥化是⼀种量产相似⽅法</description>
    </item>
    
    <item>
      <title>Moya使用</title>
      <link>https://iihui.github.io/post/ios-moya/</link>
      <pubDate>Fri, 06 Nov 2020 10:49:11 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-moya/</guid>
      <description>Moya是对Alamofire的再次封装，用于管理网络请求。 基本步骤 声明enum对请求进行分类 enum LCYApi { case login(name: String, password: String) } 实现TargetType协议 TargetType协议定义了各个请求的url，参数和header等信息，如下所示： extension LCYApi: TargetType { var baseURL: URL {</description>
    </item>
    
    <item>
      <title>使用charles</title>
      <link>https://iihui.github.io/post/tool-charles/</link>
      <pubDate>Fri, 18 Sep 2020 10:09:24 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/tool-charles/</guid>
      <description>charles是一款用于iOS的抓包工具，可以将它设置成网络访问的代理服务器，使得所有的网络访问请求都通过它来完成，从而实现网络封包的截取和分析，以作为网络访问的监视器。当App连接charles代理访问互联网时，charles可以监控这个</description>
    </item>
    
    <item>
      <title>刘海屏适配</title>
      <link>https://iihui.github.io/post/ios-layout/</link>
      <pubDate>Mon, 17 Aug 2020 08:00:07 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-layout/</guid>
      <description>自从苹果推出刘海屏之后，App开发就要做相应的适配，适配过程通常会用到topLayoutGuide和bottomLayoutGuide或者safeAreaLayoutGuide。topLayoutGuide和bottomLayoutGuid</description>
    </item>
    
    <item>
      <title>UIImage</title>
      <link>https://iihui.github.io/post/ios-image/</link>
      <pubDate>Wed, 05 Aug 2020 11:46:48 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-image/</guid>
      <description>iOS开发的时候经常遇到要处理图片，这篇文章记录一下一些图片处理函数 添加外圆 /// 将图片裁剪为带外围⭕️的圆形图 /// - Parameters: /// - rail: 外围圆的宽度 /// - color: 外围圆的颜色 /// - Returns: 生成新的图片 func circleImageWidthRail(rail: CGFloat, color: UIColor) -&amp;gt; UIImage? { let size = CGSize(width: self.size.width + 2 * rail, height: self.size.height + 2 * rail) UIGraphicsBeginImageContextWithOptions(size, false, 0) let path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: size.width,</description>
    </item>
    
    <item>
      <title>UITabBarController</title>
      <link>https://iihui.github.io/post/ios-uitabbar/</link>
      <pubDate>Sun, 02 Aug 2020 21:04:47 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-uitabbar/</guid>
      <description>添加Tab 既可以直接添加UITabBarController到storyboard中，也可以在现有的ViewController中添加UITabBarController。 直接添加 如下图所示，在Xcode 12右上角点击+号，然后输入Tab，</description>
    </item>
    
    <item>
      <title>snapkit 使用</title>
      <link>https://iihui.github.io/post/ios-snapkit/</link>
      <pubDate>Fri, 31 Jul 2020 10:10:07 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-snapkit/</guid>
      <description>inset和offset 在描述view与superview关系时，应该使用inset，而描述view与同一层级的其它view时，应该使用offset。 使用offset来设置距离子控件相对于父控件边距时，对于右边和下方的约束都需要加-号。这和</description>
    </item>
    
    <item>
      <title>字典</title>
      <link>https://iihui.github.io/post/ios-dict/</link>
      <pubDate>Thu, 30 Jul 2020 08:18:10 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-dict/</guid>
      <description>字典合并 第一个字典先提供一些默认值，对于相同的key如果第二个字典中存在相应的value，则第一个字典的value被第二个字典覆盖掉。 // 默认字段 var defaultInfo: [String: Any] = [ &amp;#34;sys_id&amp;#34;: sysID, &amp;#34;type&amp;#34;: action.rawValue, &amp;#34;ystId&amp;#34;: activeUser.pid, &amp;#34;deviceId&amp;#34;: deviceID, &amp;#34;platform&amp;#34;: platform, &amp;#34;pubVer&amp;#34;: pubVersion, &amp;#34;buildVer&amp;#34;: buildVersion, &amp;#34;deviceModel&amp;#34;: deviceModel, &amp;#34;serverTime&amp;#34;: logTime, &amp;#34;deviceTime&amp;#34;: deviceTimeStr, &amp;#34;startTime&amp;#34;: logTime, &amp;#34;endTime&amp;#34;: logTime, &amp;#34;networkType&amp;#34;: networkInfo._networkType, &amp;#34;networkName&amp;#34;: networkInfo._networkName, &amp;#34;ip&amp;#34;: networkInfo.ip, &amp;#34;inuseId&amp;#34;: inuseID, &amp;#34;gpsLng&amp;#34;: gps.lng, &amp;#34;gpsLat&amp;#34;: gps.lat, ] if let _args = args</description>
    </item>
    
    <item>
      <title>时间相关处理</title>
      <link>https://iihui.github.io/post/ios-date/</link>
      <pubDate>Wed, 29 Jul 2020 19:21:23 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-date/</guid>
      <description>毫秒级时间戳距当前时间 /// 将毫秒级别的时间戳转换为约定的格式，0～60秒显示几秒前，1～60分显示xx分钟前，1～24小时显示xx小时前，1～10天显示xx天前，否则显示yyyy-MM-dd /// - Parameter timeStamp: 毫秒级别时间戳字符串 /// - Returns: 转换后的字符串 private func</description>
    </item>
    
    <item>
      <title>富文本</title>
      <link>https://iihui.github.io/post/ios-richtext/</link>
      <pubDate>Wed, 29 Jul 2020 18:59:27 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-richtext/</guid>
      <description>在文字后面添加红点 /// 使用富文本的方式在UILabel文本后面添加红点 /// - Parameter add: isNeedAdd 为true表示要加红点，否则不需要 /// - Returns: 处理后的富文本 func addRedDot(isNeedAdd: Bool) -&amp;gt; NSMutableAttributedString { var text: String = (self.text ?? &amp;#34;&amp;#34;) if isNeedAdd { text += &amp;#34; &amp;#34; let contentText = NSMutableAttributedString(string: text) let attach = NSTextAttachment() let dotImg = UIImage(named: &amp;#34;reddot&amp;#34;) let width: CGFloat = 10 attach.bounds = CGRect(x: 0, y: 0.5, width: width, height: width) attach.image = dotImg let attrText</description>
    </item>
    
    <item>
      <title>导航栏</title>
      <link>https://iihui.github.io/post/ios-navigation/</link>
      <pubDate>Wed, 29 Jul 2020 17:13:19 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-navigation/</guid>
      <description>仿导航栏添加阴影 // 设置阴影颜色 navBGView.layer.shadowColor = UIColor.lightGray.cgColor // 设置阴影偏移范围 navBGView.layer.shadowOffset = CGSize(width: 0, height: 1.8) // 设置阴影颜色的透明度 navBGView.layer.shadowOpacity = 0.2 // 设置阴影的半径 navBGView.layer.shadowRadius = 2.5 // 设置阴影路径 navBGView.layer.shadowPath = UIBezierPath.init(rect: navBGView.bounds).cgPath 通过设置1.2.3步仿导航栏的阴影就可以出现,如果对阴影有特别的需要,可再设置4.5这两个步骤。 禁用系</description>
    </item>
    
    <item>
      <title></title>
      <link>https://iihui.github.io/post/ios-customizeuiview/</link>
      <pubDate>Fri, 03 Jul 2020 16:54:07 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-customizeuiview/</guid>
      <description>class RecommendView: UIView { @IBOutlet weak var imageView: UIImageView! @IBOutlet weak var subTitleLbl: UILabel! @IBOutlet weak var titleLbl: UILabel! @IBOutlet var contentView: UIView! override init(frame: CGRect) { //每一步都必须实现父初始化 super.init(frame: frame) contentView = loadViewFromNib() contentView.frame = bounds addSubview(contentView) } //可视化IB初始化调用 required init?(coder aDecoder: NSCoder) { super.init(coder: aDecoder) contentView = loadViewFromNib() contentView.frame = bounds addSubview(contentView) } //MARK：自定义方法 func loadViewFromNib() -&amp;gt; UIView { let nib = UINib(nibName: String(describing: RecommendView.self), bundle: Bundle(for: RecommendView.self)) let view = nib.instantiate(withOwner: self, options: nil)[0] as! UIView return view } } 参考资</description>
    </item>
    
    <item>
      <title>启动页修改</title>
      <link>https://iihui.github.io/post/ios-lanuch/</link>
      <pubDate>Wed, 01 Jul 2020 19:22:27 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-lanuch/</guid>
      <description>最近App改版，启动页也要随之修改，但是修改lanuchScreen.storyboard里的图片和样式之后并未立即生效。解决这个问题，主要分为三个步骤 图片不放xcassets中 启动页用到的图片资源，不要放入到*.xcassets中，应该直</description>
    </item>
    
    <item>
      <title>Swift 范型</title>
      <link>https://iihui.github.io/post/swift-generirs/</link>
      <pubDate>Tue, 30 Jun 2020 08:58:17 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-generirs/</guid>
      <description>范型类型 Swift允许自定义的范型类型包括类、结构体、枚举类型。 struct Stack { var items = [Int]() mutating func push(_ item:Int){ items.append(item) } mutating func pop(_ item:Int) -&amp;gt; Int { return items.removeLast() } } //调用 var stack_int = Stack() stack_int.push(7) stack_int.push(3) stack_int.push(2) print(stack_int)//Stack(items: [7, 3, 2]) 类型约束 范型函数和范型类型虽然可以和任何类型一起使用，但有时需要限制使用的类型，此时就需要使用类型</description>
    </item>
    
    <item>
      <title>Swift中defer</title>
      <link>https://iihui.github.io/post/swift-defer/</link>
      <pubDate>Sun, 28 Jun 2020 09:25:49 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-defer/</guid>
      <description>从语言设计上来说，defer是为了进行资源清理和返回前避免重复执行相关的代码，而不是用来取巧的实现某些功能，这样做只会让代码的可读性降低。 典型用法 Swift中defer声明的block会在当前代码执行退出后调用，这种延迟调用特性，一般用来进</description>
    </item>
    
    <item>
      <title>Swift5.3 新特性</title>
      <link>https://iihui.github.io/post/swift-5.3/</link>
      <pubDate>Sun, 28 Jun 2020 08:52:46 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-5.3/</guid>
      <description>Swift 5.3引入了很多新特性，包括多尾闭包，多模式catch以及Swift Package Manager的一些重要改变。 多尾闭包 在Swift5.3以前尾闭包提供了精简写法，但仅限于函数的最后一个参数为函数时。而当函数y有多个函数类型的参数时，如果该函数类型参</description>
    </item>
    
    <item>
      <title>Xcode编译报错问题</title>
      <link>https://iihui.github.io/post/ios-compiler/</link>
      <pubDate>Wed, 17 Jun 2020 10:06:46 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-compiler/</guid>
      <description>XXX-Swift.h未找到</description>
    </item>
    
    <item>
      <title>屏幕旋转</title>
      <link>https://iihui.github.io/post/ios-rotate/</link>
      <pubDate>Mon, 08 Jun 2020 20:07:26 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-rotate/</guid>
      <description>iOS开发时经常会遇到要将某些界面强制竖屏或者横屏。要做到某个页面能强制横竖屏的前提是允许屏幕旋转，然后再在具体的界面强制横竖屏。但是要区分这个具体的界面时push还是present呈现的。 全局允许横竖屏 第一种方式，是在Target中的Ge</description>
    </item>
    
    <item>
      <title>WCDB</title>
      <link>https://iihui.github.io/post/ios-wcdb/</link>
      <pubDate>Mon, 25 May 2020 23:18:53 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-wcdb/</guid>
      <description>自定义类型入库 自定义类型要遵循ColumnCodable才能入库： enum UserOrgType: String, ColumnCodable { case CMB = &amp;#34;CMB&amp;#34; case ODC = &amp;#34;3&amp;#34; static var columnType: ColumnType = .text init(with value: FundamentalValue) { self = UserOrgType(rawValue: value.stringValue) ?? UserOrgType.CMB } func archivedValue() -&amp;gt; FundamentalValue { return FundamentalValue(self.rawValue) } } /// 查看用户表是否为空 func isEmpty() -&amp;gt; Bool { do { let count = try DBManager_V2.shared.userDb.getValue(on: UserInfoModel_V2.CodingKeys.openId.count(), fromTable: tableName).int64Value return count == 0 } catch let error { printError(msg: error.localizedDescription, type: .db) return true } }</description>
    </item>
    
    <item>
      <title>UIAlertViewController</title>
      <link>https://iihui.github.io/post/ios-alertviewcontroller/</link>
      <pubDate>Mon, 20 Apr 2020 22:58:33 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-alertviewcontroller/</guid>
      <description>最近使用UIAlertViewController时，需要定制其背景颜色，在网上找到一个解决方案，基本思路是为UIAlertViewController设置一个计算属性，这个属性改变时即将UIAlertViewController的背景色修</description>
    </item>
    
    <item>
      <title>Mach-O 文件</title>
      <link>https://iihui.github.io/post/ios-macho/</link>
      <pubDate>Wed, 01 Apr 2020 08:09:20 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-macho/</guid>
      <description>Mach-O为Mach Object文件格式的缩写，它是一种用于可执行文件、目标代码、动态库的文件格式。 文件类型 常见的MachO文件有下面这些，可以通过file+文件路径来查看文件的类型信息： 目标文件.o 库文件.a | .dylib | xxx.framework/xxx 可执行文件 符号表文件</description>
    </item>
    
    <item>
      <title>创建私有库</title>
      <link>https://iihui.github.io/post/ios-private-pods/</link>
      <pubDate>Tue, 31 Mar 2020 19:52:58 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-private-pods/</guid>
      <description>使用cocoapods可以创建远程私有库，供项目使用。首先需要在github上创建一个远程索引库，然后使用cocopods在本地创建文件夹，并与远程私有库进行关联。再在github上创建远程组件库，接着使用pod创建本地工程，然后修改组件库</description>
    </item>
    
    <item>
      <title>指定Podfile中source</title>
      <link>https://iihui.github.io/post/ios-pods-question/</link>
      <pubDate>Tue, 31 Mar 2020 08:08:00 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-pods-question/</guid>
      <description>在笔记本上安装好Cocoapods之后，执行pod install后报trunk repo update failed，解决方案是在Podfile中指定另一个源仓库。 报错信息 解决方案 解决方案是在Podfile中指定source，如下所示： platform :ios, &amp;#39;8.0&amp;#39; source &amp;#39;https://github.com/CocoaPods/Specs.git&amp;#39; use_frameworks! target &amp;#39;NewWCDB&amp;#39; do pod &amp;#39;WCDB.swift&amp;#39; end 如</description>
    </item>
    
    <item>
      <title>验证码绑定界面</title>
      <link>https://iihui.github.io/post/ios-login/</link>
      <pubDate>Sat, 28 Mar 2020 15:43:49 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-login/</guid>
      <description>验证码绑定，包括个人账户，和虚拟账户。之前写的验证码绑定界面扩展性太差，这次决定尝试使用tableView实现验证码绑定界面，主要是为了增加可扩展性，便于当需要增加新的验证信息时，可以不大动原界面。这篇文章是对应的ViewControlle</description>
    </item>
    
    <item>
      <title>AutoLayout</title>
      <link>https://iihui.github.io/post/ios-autolayout/</link>
      <pubDate>Wed, 25 Mar 2020 11:52:16 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-autolayout/</guid>
      <description>苹果公司推出的AutoLayout是一个基于约束，动态计算视图大小和位置的库。它以布局引擎系统Layout Engine为核心，采用了Cassowary布局算法，在简化布局思路的同时，还保证了布局的高效性。布局算法Cassowary能够有效解</description>
    </item>
    
    <item>
      <title>不常见的关键字</title>
      <link>https://iihui.github.io/post/ios-keywords/</link>
      <pubDate>Wed, 25 Mar 2020 10:22:29 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-keywords/</guid>
      <description>使用Swift写代码时，经常会遇到一些不常见的关键词或者常用关键词的特殊使用场景，因为比较少使用，通常这些不常见的关键词或者特殊场景很容易忘记，这篇文章用于记录这些情况。 便利构造函数 convenience用于构造函数中，称之为便利构造函数。</description>
    </item>
    
    <item>
      <title>pcm No such file or directory</title>
      <link>https://iihui.github.io/post/ios-pcm-warnning/</link>
      <pubDate>Mon, 23 Mar 2020 15:15:31 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-pcm-warnning/</guid>
      <description>在封装静态framework时，在本机上没有报任何警告，在其他机器上却报warning: ***/Library/Developer/Xcode/DerivedData/ModuleCache.noindex/2MSIKR0H4Y5WQ/Foundation-A3SOD99KJ0S9.pcm: No such file or directory警告。这篇文章就是解决这个警告问题，主要是改变工程的build setting有三个地方需要修改，暂且归为三步。 第一步 首先在B</description>
    </item>
    
    <item>
      <title>强制浅色模式</title>
      <link>https://iihui.github.io/post/ios-light-style/</link>
      <pubDate>Sun, 22 Mar 2020 06:18:48 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-light-style/</guid>
      <description>iOS 13之后，一旦使用了系统的组件，如果用户开启了深色模式，则这些组件的颜色会随着发生变化，而此时某些使用了自定义颜色的组件对应的颜色不会改变，如此将会非常难看。一个简单的方式是强制App为浅色模式，使得系统开启了深色模式后，App还是之前的</description>
    </item>
    
    <item>
      <title>iOS tips</title>
      <link>https://iihui.github.io/post/ios-tips/</link>
      <pubDate>Thu, 19 Mar 2020 21:27:43 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-tips/</guid>
      <description>类与结构体 共同点 定义属性用于存储值 定义方法用于提供方法 定义下标操作使得可以通过下标语法来访问实例所包含的值 定义构造器用于生成初始值 通过扩展协议来增加默认实现的功能 实现协议来提供某种标准功能 类多一点 允许一个类继承另一个类的特镇 类型转换允许在运</description>
    </item>
    
    <item>
      <title>AES 实现</title>
      <link>https://iihui.github.io/post/ios-aes/</link>
      <pubDate>Tue, 17 Mar 2020 17:24:04 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-aes/</guid>
      <description>高级加密标准(AES,Advanced Encryption Standard)，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用是最常见的对称加密算法，它是一种对称加密算法（对称加密是指加密和解密使用相同的密</description>
    </item>
    
    <item>
      <title>iOS开发使用Safari调试WebView</title>
      <link>https://iihui.github.io/post/ios-debug-safari/</link>
      <pubDate>Thu, 27 Feb 2020 06:14:27 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-debug-safari/</guid>
      <description>在Mac上调试iOS WebView既需要在Mac上的Safari浏览器上开启开发者选项，也需要在iOS设备上开启Web检查功能。 开启Mac的开发者菜单 首先需要开启Mac上Safari浏览器的显示开发者菜单选项。即先进入到Safari浏览器中</description>
    </item>
    
    <item>
      <title>where 关键字</title>
      <link>https://iihui.github.io/post/ios-where/</link>
      <pubDate>Sat, 22 Feb 2020 20:49:20 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-where/</guid>
      <description>Swift中的where关键字主要用于限定条件，既可在switch语句中使用，也可以在for中使用，还可以用在扩展中用于限定应该遵循某种协议。 switch中 在switch语句中使用，where一般是配合if let来用于限定某些条件，例如： let</description>
    </item>
    
    <item>
      <title>Swift 方法交换中的addMethod</title>
      <link>https://iihui.github.io/post/ios-addmethod/</link>
      <pubDate>Fri, 21 Feb 2020 10:18:17 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-addmethod/</guid>
      <description>Swizzle是OC的黑魔法之一，可以在运行时对两个方法的实现进行交换，也就是用户可以用自己的方法替换原来的方法实现，做一些其它事情。Swift也可以使用运行时的方法交换，如果要了解Swift的方法交换，首先应该了解class_addMet</description>
    </item>
    
    <item>
      <title>UIControl</title>
      <link>https://iihui.github.io/post/ios-uicontrol/</link>
      <pubDate>Fri, 14 Feb 2020 20:53:50 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-uicontrol/</guid>
      <description>UIControl是UIView的子类，也是UIResponder的子类。是UIButton，UISwitch，UITextField等控件的父类。它本身定义了一些属性和方法，但是不能直接使用。 方法交换 extension UIControl { class func swizzleMethod() { struct Static { static var token = NSUUID().uuidString } // 确保</description>
    </item>
    
    <item>
      <title>Swift 中的反射</title>
      <link>https://iihui.github.io/post/ios-reflection/</link>
      <pubDate>Fri, 14 Feb 2020 17:19:38 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-reflection/</guid>
      <description>在计算机学中，reflection(反射)是指计算机程序在runtime时可以访问、检测和修改它本身状态或行为的一种能力。比较形象的说法就是，反射是程序在运行的时候能够观察并且修改自己的行为。 @objc Swift是一门静态语言，和OC不同，不能在运</description>
    </item>
    
    <item>
      <title>飞书特色功能</title>
      <link>https://iihui.github.io/post/ios-feishu/</link>
      <pubDate>Tue, 11 Feb 2020 07:12:18 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-feishu/</guid>
      <description>飞书把更多的需求优化倾向于团队成员，而不是管理者。所以它以「即时沟通」为中心，将在线文档、云盘、日历等功能全部整合在一起。 例如，可以在IM（即时通讯）界面直接创建文档，共同编辑，也可以在文档中进一步讨论细节问题；或是发起一个日程，在日程中直</description>
    </item>
    
    <item>
      <title>iOS 可视化埋点</title>
      <link>https://iihui.github.io/post/ios-log-point/</link>
      <pubDate>Sun, 09 Feb 2020 16:54:52 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-log-point/</guid>
      <description>埋点方案大体上可以归为3类：代码埋点，可视化埋点，无埋点。代码埋点，由开发人员在触发事件的具体方法里，植入多行代码把需要上传的数据发送至服务端。可视化埋点，根据标识来识别每一个事件，针对指定的事件进行取参埋点。而事件的标识与参数信息都写在配</description>
    </item>
    
    <item>
      <title>UITableView 使用</title>
      <link>https://iihui.github.io/post/ios-uitableview/</link>
      <pubDate>Tue, 17 Dec 2019 14:08:45 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-uitableview/</guid>
      <description>在iOS开发中，UITableView的使用频率较高，这篇文章主要用于记录一些常用的使用方法和问题解决方案。 点击cell不变色 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell { let cell = tableView.dequeueReusableCell(withIdentifier: cellId, for: indexPath) as! NoteDetailInfoCell cell.selectionStyle = .none //点击该cell不变色 return cell } Cell异步更新 在UITableView</description>
    </item>
    
    <item>
      <title>Swift访问权限</title>
      <link>https://iihui.github.io/post/ios-access-level/</link>
      <pubDate>Wed, 09 Jan 2019 09:18:25 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-access-level/</guid>
      <description>访问权限用于限制部分代码被其它源文件或者模块访问，目的是隐藏某些代码的实现细节。在Swift中可以设置类型(类、结构和枚举)的访问权限，也可以设置属性和方法的访问权限。Swift提供了5个访问级别，这些访问级别以模块和源文件为区分粒度。 模块</description>
    </item>
    
    <item>
      <title>XCode</title>
      <link>https://iihui.github.io/post/xcode-quick/</link>
      <pubDate>Tue, 27 Nov 2018 15:20:06 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/xcode-quick/</guid>
      <description>快捷键 键盘图标 ⌘——Command () ⌃ ——Control ⌥——Option (alt) ⇧——Shift ⇪——Caps Lock 快捷键 Command+R 运行 Command+B 编译 Command+. 停止 Command + Shift + K 清除工程 Command + K 清除控制台信息 Command + N 新建文件 Command + Shift + N 创建新工程 导航栏 Command+0~9 工程导航 Command + 0 快速打开实</description>
    </item>
    
    <item>
      <title>流水线自动发布组件</title>
      <link>https://iihui.github.io/post/ios-release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-release/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>
