<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS on 呆呆的博客</title>
    <link>https://IIHui.github.io/categories/ios/</link>
    <description>Recent content in iOS on 呆呆的博客</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-Hans</language>
    <copyright>&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;&lt;img alt=&#34;知识共享许可协议&#34; style=&#34;border-width:0&#34; src=&#34;https://i.creativecommons.org/l/by-nc-sa/4.0/88x31.png&#34; /&gt;&lt;/a&gt;&lt;br /&gt;本作品采用&lt;a rel=&#34;license&#34; href=&#34;http://creativecommons.org/licenses/by-nc-sa/4.0/&#34;&gt;知识共享署名-非商业性使用-相同方式共享 4.0 国际许可协议&lt;/a&gt;进行许可。</copyright>
    <lastBuildDate>Thu, 07 Mar 2019 09:28:12 +0000</lastBuildDate>
    
	<atom:link href="https://IIHui.github.io/categories/ios/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>GCD</title>
      <link>https://IIHui.github.io/post/ios-dispatchqueue/</link>
      <pubDate>Thu, 07 Mar 2019 09:28:12 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-dispatchqueue/</guid>
      <description>参考资料 参考资料1 参考资料2</description>
    </item>
    
    <item>
      <title>第三方库放到Cocoapods中</title>
      <link>https://IIHui.github.io/post/ios-cocoapods-storage/</link>
      <pubDate>Fri, 01 Mar 2019 09:34:41 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-cocoapods-storage/</guid>
      <description>因项目需要引用百度语音合成SDK，但这个第三方库的.a文件过于庞大，按规定不能直接放到项目中，需要放到项目依赖的Cocoapods仓库中。因</description>
    </item>
    
    <item>
      <title>引入百度语音合成</title>
      <link>https://IIHui.github.io/post/ios-baidusynthesizer/</link>
      <pubDate>Thu, 28 Feb 2019 11:08:15 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-baidusynthesizer/</guid>
      <description>因项目中需要用到百度语音合成SDK，因此自己先建了一个工程作为引入测试，总结下来为准备&amp;ndash;&amp;gt;导入&amp;ndash;&amp;gt;创建应</description>
    </item>
    
    <item>
      <title>H5视频播放</title>
      <link>https://IIHui.github.io/post/ios-html-player/</link>
      <pubDate>Mon, 25 Feb 2019 08:52:09 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-html-player/</guid>
      <description>最近APP出现了在iPhone上拍的视频，同步到Android手机后播放不了的问题，第一感觉应该是iPhone上录制视频所使用的编码不兼容A</description>
    </item>
    
    <item>
      <title>半透明的悬浮提示窗</title>
      <link>https://IIHui.github.io/post/ios-alert-window/</link>
      <pubDate>Sun, 24 Feb 2019 19:50:43 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-alert-window/</guid>
      <description>因项目中需要一个悬浮提示窗，从网上找到一篇以OC为示例的文章，因为公司项目是Swift写的，因此需要将OC转为Swift。 OC代码 .h文件 //CustomAlertWindow.h</description>
    </item>
    
    <item>
      <title>UIWebview 加载含特殊字符网页</title>
      <link>https://IIHui.github.io/post/ios-webview-html/</link>
      <pubDate>Sun, 24 Feb 2019 18:57:05 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-webview-html/</guid>
      <description>UIWebview中加载的html文件中如果含有\n,&#39;等特殊字符时，显示为一片空白，通过查阅资料得知需要将这些特殊字符进行预处理。 预处理 class</description>
    </item>
    
    <item>
      <title>HTTP 网络请求</title>
      <link>https://IIHui.github.io/post/ios-network-tcp/</link>
      <pubDate>Fri, 18 Jan 2019 09:37:41 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-network-tcp/</guid>
      <description>参考资料 参考资料</description>
    </item>
    
    <item>
      <title>创建新的Target</title>
      <link>https://IIHui.github.io/post/ios-new-target/</link>
      <pubDate>Thu, 10 Jan 2019 11:18:46 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-new-target/</guid>
      <description>因项目需要新建一条众测流水线，因此首先需要基于DEV环境新建一个Target，然后将新建的Target对配置到新建的流水线上。 Duplicate 新Targe</description>
    </item>
    
    <item>
      <title>Swift访问权限</title>
      <link>https://IIHui.github.io/post/ios-access-control/</link>
      <pubDate>Wed, 09 Jan 2019 09:18:25 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-access-control/</guid>
      <description>访问权限用于限制部分代码被其它源文件或者模块访问，目的是隐藏某些代码的实现细节。在Swift中可以设置类型(类、结构和枚举)的访问权限，也可</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://IIHui.github.io/post/ios-swift-singleton/</link>
      <pubDate>Mon, 07 Jan 2019 23:29:33 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-swift-singleton/</guid>
      <description>单例模式(Singleton Pattern)属于创建型模式，该模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有一个单例对象被创建</description>
    </item>
    
    <item>
      <title>基于PageController的图片预览</title>
      <link>https://IIHui.github.io/post/ios-image-preview/</link>
      <pubDate>Sat, 05 Jan 2019 11:49:11 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-image-preview/</guid>
      <description>参考资料 参考资料 参考资料 参考资料</description>
    </item>
    
    <item>
      <title>LLDB 调试</title>
      <link>https://IIHui.github.io/post/ios-debug/</link>
      <pubDate>Fri, 04 Jan 2019 14:15:45 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-debug/</guid>
      <description>LLDB是一个庞大的工具,内置了许多有用的命令。 命令语法结构 &amp;lt;command&amp;gt; [&amp;lt;subcommand&amp;gt; [&amp;lt;subcommand&amp;gt;...]] &amp;lt;action&amp;gt; [-options [option-value]] [argument [argument...]] 其中： command和subcommand为LLDB调试命令的名</description>
    </item>
    
    <item>
      <title>多图片选择</title>
      <link>https://IIHui.github.io/post/ios-image-selector/</link>
      <pubDate>Fri, 04 Jan 2019 09:51:58 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-image-selector/</guid>
      <description>第一步 JSAPI中有个文件选择器，而文件选择器中有选择多个图片的功能。首先在WebviewController.swift中找到: case UrlSchema.fileSelectorSchema.rawValue: //文</description>
    </item>
    
    <item>
      <title>Swift中for-in的各种姿势</title>
      <link>https://IIHui.github.io/post/swift-for-in/</link>
      <pubDate>Fri, 04 Jan 2019 08:16:45 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/swift-for-in/</guid>
      <description>Swift中只有一种形式的for循环，即for-in。但是for-in有多种形式，包括常规用法和区间循环。 常规用法 常规用法一般用于直接访问数</description>
    </item>
    
    <item>
      <title>改造</title>
      <link>https://IIHui.github.io/post/ios-peer-2/</link>
      <pubDate>Thu, 03 Jan 2019 09:51:36 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-peer-2/</guid>
      <description>改造NoteNetwork getAccessToken中用到了tokenController中的requestLoginDataAndTok</description>
    </item>
    
    <item>
      <title>iOS允许HTTP请求</title>
      <link>https://IIHui.github.io/post/ios-http/</link>
      <pubDate>Sat, 29 Dec 2018 11:05:00 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-http/</guid>
      <description>在iOS 9之后，苹果默认要求App访问的url必须为https的安全链接，为了能在项目中请求Http链接，需要在项目中自动生成的Info.p</description>
    </item>
    
    <item>
      <title>AFNetworking 使用</title>
      <link>https://IIHui.github.io/post/ios-anfnetworking/</link>
      <pubDate>Fri, 28 Dec 2018 21:08:45 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-anfnetworking/</guid>
      <description>AFNetworking是为OS X和iOS设计的一套网络框架，对NSURLConnection和NSURLSession做了封装，提供了丰富</description>
    </item>
    
    <item>
      <title>笔记剥离</title>
      <link>https://IIHui.github.io/post/ios-note-peel/</link>
      <pubDate>Wed, 26 Dec 2018 11:28:32 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-note-peel/</guid>
      <description>需要处理的 集成百度语音到Framework，应当集成到基础模块 集成百度地图到Framework中，应该以接口的形式抽取出来 数据库剥离 用户数据</description>
    </item>
    
    <item>
      <title>Framework</title>
      <link>https://IIHui.github.io/post/ios-framework/</link>
      <pubDate>Tue, 25 Dec 2018 11:45:01 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-framework/</guid>
      <description>链接库 库是一种共享程序代码的方式，分为静态库和动态库。静态库链接时被完整地拷贝到可执行文件，多次使用时就会有多个副本。 而动态库在链接时不复制</description>
    </item>
    
    <item>
      <title>桥接文件</title>
      <link>https://IIHui.github.io/post/ios-bridge/</link>
      <pubDate>Mon, 24 Dec 2018 23:41:52 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-bridge/</guid>
      <description>因为历史原因，在使用Swift编程时，常常需要用到OC类中的方法，此时就需要使用桥接文件来引入OC中的头文件，以告诉Swift。 手动创建桥接</description>
    </item>
    
    <item>
      <title>WKWebView</title>
      <link>https://IIHui.github.io/post/ios-wkwebview/</link>
      <pubDate>Mon, 24 Dec 2018 08:47:19 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-wkwebview/</guid>
      <description>使用 self.webView.scrollView.addObserver(self, forKeyPath: &amp;#34;contentSize&amp;#34;, options: .new, context: nil) } override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) { if let key = keyPath, key == &amp;#34;contentSize&amp;#34;{ let fittingSize = self.webView.sizeThatFits(CGSize.zero) self.webView.frame = CGRect(x: 0, y: noteTitleTextField.frame.height, width: fittingSize.width, height: fittingSize.height) } }</description>
    </item>
    
    <item>
      <title>iOS 版本检查</title>
      <link>https://IIHui.github.io/post/ios-new-version/</link>
      <pubDate>Thu, 20 Dec 2018 11:53:15 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-new-version/</guid>
      <description>首先由AboutViewController中的presenter调用其requestLastestVersion方法，而presenter</description>
    </item>
    
    <item>
      <title>selection 对象</title>
      <link>https://IIHui.github.io/post/js-selection/</link>
      <pubDate>Mon, 17 Dec 2018 16:46:24 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/js-selection/</guid>
      <description>在富文本编辑器中，需要控制光标的各种状态信息，位置信息。浏览器提供了selection对象和range对象来操作光标。 selection Selection对</description>
    </item>
    
    <item>
      <title>KVO 简介</title>
      <link>https://IIHui.github.io/post/ios-kvo/</link>
      <pubDate>Mon, 17 Dec 2018 15:09:08 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-kvo/</guid>
      <description>在OC中KVO(key-value observing)是一种通知机制，定义了一种对象之间监控对方状态，并做出相应动作的机制。当指定的被观察者</description>
    </item>
    
    <item>
      <title>UITableView</title>
      <link>https://IIHui.github.io/post/ios-uitableview/</link>
      <pubDate>Mon, 17 Dec 2018 14:08:45 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-uitableview/</guid>
      <description>UITableView可以显示多行多组数据,创建表格视图有两种风格，一种为Plain，另一种为Grouped。 点击不变色 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell {</description>
    </item>
    
    <item>
      <title>AVPlayer播放</title>
      <link>https://IIHui.github.io/post/ios-avplayer/</link>
      <pubDate>Fri, 14 Dec 2018 10:54:44 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-avplayer/</guid>
      <description>监听AVPlayer播放结束 NotificationCenter.default.addObserver(self, selector: #selector(handlerPlayerFinish), name: NSNotification.Name.AVPlayerItemDidPlayToEndTime, object: self.playerItem) self.playerItem = AVPlayerItem(url: outputFileURL) self.avPlayer = AVPlayer(playerItem: self.playerItem)</description>
    </item>
    
    <item>
      <title>RunLoop</title>
      <link>https://IIHui.github.io/post/ios-runloop/</link>
      <pubDate>Fri, 14 Dec 2018 08:21:26 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-runloop/</guid>
      <description>概念 一般来讲，一个线程一次只能执行一个任务，执行完成后，线程就会退出。若我们需要一个机制，让线程能随时处理事件但并不退出，通常的代码逻辑是下</description>
    </item>
    
    <item>
      <title>权限检查</title>
      <link>https://IIHui.github.io/post/ios-authority/</link>
      <pubDate>Thu, 13 Dec 2018 20:25:33 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-authority/</guid>
      <description>相机权限检查 相机和音频的权限分为4种，分别是.denied,restricted,.authorized,.notDetermined,.a</description>
    </item>
    
    <item>
      <title>透明度渐变动画</title>
      <link>https://IIHui.github.io/post/ios-animation/</link>
      <pubDate>Thu, 13 Dec 2018 10:50:31 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-animation/</guid>
      <description>CABasicAnimation关键帧动画 所谓关键帧动画，就是将Layer的属性作为KeyPath来注册，只要指定动画的起始帧和结束帧，然后</description>
    </item>
    
    <item>
      <title>透明度渐变动画</title>
      <link>https://IIHui.github.io/post/ios-opicity-animation/</link>
      <pubDate>Thu, 13 Dec 2018 10:50:31 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-opicity-animation/</guid>
      <description>CABasicAnimation关键帧动画 所谓关键帧动画，就是将Layer的属性作为KeyPath来注册，只要指定动画的起始帧和结束帧，然后</description>
    </item>
    
    <item>
      <title>Gif的播放与暂停</title>
      <link>https://IIHui.github.io/post/ios-gif/</link>
      <pubDate>Thu, 13 Dec 2018 08:25:45 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-gif/</guid>
      <description>Gif的播放有两种方式，一种是通过UIWebview；一种是通过UIImageView的方式。使用UIWebview的缺点是不可以暂停。 UIWebView import</description>
    </item>
    
    <item>
      <title>iOS视频开发入门</title>
      <link>https://IIHui.github.io/post/ios-video/</link>
      <pubDate>Wed, 12 Dec 2018 10:55:40 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-video/</guid>
      <description>视频实质 纯粹的视频（不包括音频）实质上就是一组帧图片，经过视频编码成为视频(video)文件再把音频（audio）文件以及字幕文件组装在一起</description>
    </item>
    
    <item>
      <title>XCode快捷键</title>
      <link>https://IIHui.github.io/post/xcode-quick/</link>
      <pubDate>Tue, 27 Nov 2018 15:20:06 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/xcode-quick/</guid>
      <description>MAC键盘图标 ⌘——Command () ⌃ ——Control ⌥——Option (alt) ⇧——Shift ⇪——Caps Lock 快捷键 Command+R 运行 Command+B 编译 Command+. 停止 Command +</description>
    </item>
    
    <item>
      <title>swift中的方法</title>
      <link>https://IIHui.github.io/post/swift-method/</link>
      <pubDate>Fri, 14 Sep 2018 09:31:40 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/swift-method/</guid>
      <description>方法是关联了特定类型的函数。类，结构体，枚举类型都能定义实例方法，方法封装了给定类型特定的任务和功能。 实例方法 实例方法是属于特定实例（类实例</description>
    </item>
    
    <item>
      <title>手动部署包</title>
      <link>https://IIHui.github.io/post/ios-package-version/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-package-version/</guid>
      <description>今天因流水线的自动部署故障，又加上项目中引入了百度语音合成，超过了100M，因此需要手动将打好的包传到后台服务器，然后设置这个包有效，这个过</description>
    </item>
    
  </channel>
</rss>