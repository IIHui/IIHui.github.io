<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS on Keep It Simple</title>
    <link>https://iihui.github.io/categories/ios/</link>
    <description>Recent content in iOS on Keep It Simple</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 28 Mar 2020 15:43:49 +0000</lastBuildDate>
    
	<atom:link href="https://iihui.github.io/categories/ios/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>验证码绑定界面</title>
      <link>https://iihui.github.io/post/ios-login/</link>
      <pubDate>Sat, 28 Mar 2020 15:43:49 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-login/</guid>
      <description>验证码绑定界面，包括个人用户，和虚拟账户登陆。之前写的登陆界面扩展性太差，决定使用tableView简单实现了验证码登陆界面，主要是增加可扩展性，便于增加新的验证的信息，可以不大动原界面。 代码 import UIKit enum SMSLoginType { case Personal case Virtual } class NewSMSViewController: UIViewController, UITableViewDelegate, UITableViewDataSource { @IBOutlet weak var personalAccountBtn: UIButton! @IBOutlet weak var</description>
    </item>
    
    <item>
      <title>AutoLayout</title>
      <link>https://iihui.github.io/post/ios-autolayout/</link>
      <pubDate>Wed, 25 Mar 2020 11:52:16 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-autolayout/</guid>
      <description>苹果公司推出的AutoLayout是一个基于约束，动态计算视图大小和位置的库。它以布局引擎系统Layout Engine为核心，采用了Cassowary布局算法，在简化布局思路的同时，还保证了布局的高效性。 几个需要更新方法的区别 setNeedsLayout 告知页面需要</description>
    </item>
    
    <item>
      <title>swift一些不常见的关键字</title>
      <link>https://iihui.github.io/post/ios-keywords/</link>
      <pubDate>Wed, 25 Mar 2020 10:22:29 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-keywords/</guid>
      <description>convenience convenience用于构造函数中，称之为便利构造函数。通常在对一些系统控件扩展分类的时候用convenience关键字，比如： extension UIColor { convenience init(hex: String) { var cString: String = hex.trimmingCharacters(in: .whitespacesAndNewlines).uppercased() if (cString.hasPrefix(&amp;#34;#&amp;#34;)) { cString.remove(at: cString.startIndex) } assert(cString.count == 6, &amp;#34;无效的hex值&amp;#34;) var rgbValue: UInt64 = 0 Scanner(string: cString).scanHexInt64(&amp;amp;rgbValue) self.init( red: CGFloat((rgbValue &amp;amp; 0xFF0000) &amp;gt;&amp;gt; 16)</description>
    </item>
    
    <item>
      <title>pcm No such file or directory</title>
      <link>https://iihui.github.io/post/ios-pcm-warnning/</link>
      <pubDate>Mon, 23 Mar 2020 15:15:31 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-pcm-warnning/</guid>
      <description>在封装静态framework时，在本机上没有报任何警告，在其他机器上却报warning: ***/Library/Developer/Xcode/DerivedData/ModuleCache.noindex/2MSIKR0H4Y5WQ/Foundation-A3SOD99KJ0S9.pcm: No such file or directory警告。这篇文章就是解决这个警告问题，主要是改变工程的build setting有三个地方需要修改，暂且归为三步。 第一步 首先在B</description>
    </item>
    
    <item>
      <title>强制浅色模式</title>
      <link>https://iihui.github.io/post/ios-light-style/</link>
      <pubDate>Sun, 22 Mar 2020 06:18:48 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-light-style/</guid>
      <description>iOS 13之后，一旦使用了系统的组件，如果用户开启了深色模式，则这些组件的颜色会随着发生变化，而此时某些使用了自定义颜色的组件对应的颜色不会改变，如此将会非常难看。一个简单的方式是强制App为浅色模式，使得系统开启了深色模式后，App还是之前的</description>
    </item>
    
    <item>
      <title>iOS tips</title>
      <link>https://iihui.github.io/post/ios-tips/</link>
      <pubDate>Thu, 19 Mar 2020 21:27:43 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-tips/</guid>
      <description>类与结构体 共同点 定义属性用于存储值 定义方法用于提供方法 定义下标操作使得可以通过下标语法来访问实例所包含的值 定义构造器用于生成初始值 通过扩展协议来增加默认实现的功能 实现协议来提供某种标准功能 类多一点 允许一个类继承另一个类的特镇 类型转换允许在运</description>
    </item>
    
    <item>
      <title>AES 实现</title>
      <link>https://iihui.github.io/post/ios-aes/</link>
      <pubDate>Tue, 17 Mar 2020 17:24:04 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-aes/</guid>
      <description>高级加密标准(AES,Advanced Encryption Standard)是最常见的对称加密算法（对称加密是指加密和解密使用相同的密钥）。密钥是AES算法实现加密和解密的根本，对称加密算法之所以对称，是因为这类算法对明文的加密和解密需要同一个密钥。AES支</description>
    </item>
    
    <item>
      <title>iOS开发使用Safari调试WebView</title>
      <link>https://iihui.github.io/post/ios-debug-safari/</link>
      <pubDate>Thu, 27 Feb 2020 06:14:27 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-debug-safari/</guid>
      <description>在Mac上调试iOS WebView既需要在Mac上的Safari浏览器上开启开发者选项，也需要在iOS设备上开启Web检查功能。 开启Mac的开发者菜单 首先需要开启Mac上Safari浏览器的显示开发者菜单选项。即先进入到Safari浏览器中</description>
    </item>
    
    <item>
      <title>Swift 中 where 关键字</title>
      <link>https://iihui.github.io/post/ios-where/</link>
      <pubDate>Sat, 22 Feb 2020 20:49:20 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-where/</guid>
      <description>Swift中的where关键字主要用于限定条件，既可在switch语句中使用，也可以用在for in中，还可以在扩展中限定应该遵循某种协议。 switch中使用 在switch语句中使用，where一般是配合if let来用于限定某些条件，例如： let</description>
    </item>
    
    <item>
      <title>Swift 方法交换中的addMethod</title>
      <link>https://iihui.github.io/post/ios-addmethod/</link>
      <pubDate>Fri, 21 Feb 2020 10:18:17 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-addmethod/</guid>
      <description>Swizzle是OC的黑魔法之一，可以在运行时对两个方法的实现进行交换，也就是用户可以用自己的方法替换原来的方法实现，做一些其它事情。Swift也可以使用运行时的方法交换，如果要了解Swift的方法交换，首先应该了解class_addMet</description>
    </item>
    
    <item>
      <title>UIControl</title>
      <link>https://iihui.github.io/post/ios-uicontrol/</link>
      <pubDate>Fri, 14 Feb 2020 20:53:50 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-uicontrol/</guid>
      <description>UIControl是UIView的子类，也是UIResponder的子类。是UIButton，UISwitch，UITextField等控件的父类。它本身定义了一些属性和方法，但是不能直接使用。 方法交换 extension UIControl { class func swizzleMethod() { struct Static { static var token = NSUUID().uuidString } //确</description>
    </item>
    
    <item>
      <title>Swift 中的反射</title>
      <link>https://iihui.github.io/post/ios-reflection/</link>
      <pubDate>Fri, 14 Feb 2020 17:19:38 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-reflection/</guid>
      <description>在计算机学中，reflection(反射)是指计算机程序在runtime时可以访问、检测和修改它本身状态或行为的一种能力。比较形象的说法就是，反射是程序在运行的时候能够观察并且修改自己的行为。 @objc Swift是一门静态语言，和OC不同，不能在运</description>
    </item>
    
    <item>
      <title>飞书特色功能</title>
      <link>https://iihui.github.io/post/ios-feishu/</link>
      <pubDate>Tue, 11 Feb 2020 07:12:18 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-feishu/</guid>
      <description>飞书把更多的需求优化倾向于团队成员，而不是管理者。所以它以「即时沟通」为中心，将在线文档、云盘、日历等功能全部整合在一起。 例如，可以在IM（即时通讯）界面直接创建文档，共同编辑，也可以在文档中进一步讨论细节问题；或是发起一个日程，在日程中直</description>
    </item>
    
    <item>
      <title>iOS 可视化埋点</title>
      <link>https://iihui.github.io/post/ios-log-point/</link>
      <pubDate>Sun, 09 Feb 2020 16:54:52 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-log-point/</guid>
      <description>埋点方案大体上可以归为3类：代码埋点，可视化埋点，无埋点。代码埋点，由开发人员在触发事件的具体方法里，植入多行代码把需要上传的数据发送至服务端。可视化埋点，根据标识来识别每一个事件，针对指定的事件进行取参埋点。而事件的标识与参数信息都写在配</description>
    </item>
    
  </channel>
</rss>