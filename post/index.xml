<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Keep It Simple</title>
    <link>https://iihui.github.io/post/</link>
    <description>Recent content in Posts on Keep It Simple</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Mon, 04 Jan 2021 08:03:49 +0000</lastBuildDate>
    
	<atom:link href="https://iihui.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hugo Next 主题</title>
      <link>https://iihui.github.io/post/hugo-next/</link>
      <pubDate>Fri, 07 Feb 2020 11:27:41 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/hugo-next/</guid>
      <description>从兰陵子处下载了Next主题，修改了主题下面的config.toml配置文件(配置文件的路径如下图所示)。但发现有很多地方还是需要修改才能满足自己的需求，因为对前端了解较少，故以此为记。 代码高亮支持 插入Golang、Swift和OC代码段时</description>
    </item>
    
    <item>
      <title>UITableView自动调整高度</title>
      <link>https://iihui.github.io/post/ios-footer/</link>
      <pubDate>Mon, 04 Jan 2021 08:03:49 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-footer/</guid>
      <description>动态调整footer高度 override func viewDidLayoutSubviews() { super.viewDidLayoutSubviews() guard let footerView = self.tableView.tableFooterView else { return } let width = self.tableView.bounds.size.width let size = footerView.systemLayoutSizeFitting(CGSize(width: width, height: UIView.layoutFittingCompressedSize.height)) if footerView.frame.size.height != size.height { footerView.frame.size.height = size.height self.tableView.tableFooterView = footerView } } 参考 原子属性 静态缓存变量（类相关），数组，字典均是多线程不安全的，为了解决线程安全问题，Swift提供了propertyWrapper，如下</description>
    </item>
    
    <item>
      <title>KSCrash</title>
      <link>https://iihui.github.io/post/ios-kscrash/</link>
      <pubDate>Sat, 26 Dec 2020 17:33:11 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-kscrash/</guid>
      <description>KSCrash是iOS知名的crash收集框架。总共分为三个部分，Crash Recording，Crash Reporting以及Installation。其中Installation用来启动KSCrash，并且指定Crash收集的方式。Cr</description>
    </item>
    
    <item>
      <title>UIScene不能使用UIAlertView</title>
      <link>https://iihui.github.io/post/ios-uiscene/</link>
      <pubDate>Fri, 25 Dec 2020 15:44:48 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-uiscene/</guid>
      <description>今天测试KSCrash时使用XCode 12.3新建了一个工程，写了测试代码之后报UIAlertView is deprecated and unavailable for UIScene based applications, please use UIAlertController错误，然后参照stackover上的回答，解决了报错问题。 第一步 解决这个问题的核心就</description>
    </item>
    
    <item>
      <title>Shell 常用命令</title>
      <link>https://iihui.github.io/post/shell-base/</link>
      <pubDate>Sun, 29 Nov 2020 10:50:55 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/shell-base/</guid>
      <description>本文记录工作中用的shell命令，以便下次使用的时候查阅。 软链接 创建 ln ~/.cocoapods/repos-art/CocoaPods-cmb ~/.cocoapods/repos 删除 unlink cocoaPods-github</description>
    </item>
    
    <item>
      <title>Python 基础</title>
      <link>https://iihui.github.io/post/python-base/</link>
      <pubDate>Mon, 23 Nov 2020 23:36:18 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/python-base/</guid>
      <description>字符串 在python中，用引号括起来的都是字符串，其中的引号可以是单引号，也可以是双引号。对于字符串，title()函数以首字母大写的方式显示每个单词；upper()函数将字符串全部转为大写；lower()函数将字符串全部转为小写。 lstr</description>
    </item>
    
    <item>
      <title>Swift Tips</title>
      <link>https://iihui.github.io/post/swift-tips/</link>
      <pubDate>Thu, 12 Nov 2020 08:27:33 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-tips/</guid>
      <description>柯里化 柯里化(curry)：把接受多个参数的函数变换成接受一个单一参数（最初函数的第一个参数）的函数，并且返回接受余下参数而且返回结果的新函数。 func addTo(_ adder: Int) -&amp;gt; (Int) -&amp;gt; Int { return { num in return num + adder } } let addTwo = addTo(2) // addTwo: Int -&amp;gt; Int let result = addTwo(6) // result = 8 柯⾥化是⼀种量产相似⽅法</description>
    </item>
    
    <item>
      <title>Kotlin 基础</title>
      <link>https://iihui.github.io/post/kotlin-base/</link>
      <pubDate>Tue, 10 Nov 2020 08:07:17 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/kotlin-base/</guid>
      <description>变量和函数 常量 Kotlin中使用val来声明常量「val是value的缩写」，val声明的常量不可以再重新赋值，否则会报错。val对应Java中的final。 val str = &amp;#34;Hello world&amp;#34; 变量 Kotlin中使用var来声明变量「var是variable的缩写」</description>
    </item>
    
    <item>
      <title>Moya使用</title>
      <link>https://iihui.github.io/post/ios-moya/</link>
      <pubDate>Fri, 06 Nov 2020 10:49:11 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-moya/</guid>
      <description>Moya是对Alamofire的再次封装，用于管理网络请求。 基本步骤 声明enum对请求进行分类 enum LCYApi { case login(name: String, password: String) } 实现TargetType协议 TargetType协议定义了各个请求的url，参数和header等信息，如下所示： extension LCYApi: TargetType { var baseURL: URL {</description>
    </item>
    
    <item>
      <title>PromiseKit使用</title>
      <link>https://iihui.github.io/post/ios-promisekit/</link>
      <pubDate>Tue, 03 Nov 2020 10:33:04 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-promisekit/</guid>
      <description>PromiseKit是简化异步编程的一种非必要方式，使用它可以提高代码的可读性和维护性，让代码更加优雅，主要用于解决「回调地狱」问题。 回调地狱 为了保证异步代码按顺序执行，通常将异步代码嵌套在回调函数中。如果异步方法过多，就会产生过多的回调，</description>
    </item>
    
    <item>
      <title>使用charles</title>
      <link>https://iihui.github.io/post/tool-charles/</link>
      <pubDate>Fri, 18 Sep 2020 10:09:24 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/tool-charles/</guid>
      <description>charles是一款用于iOS的抓包工具，可以将它设置成网络访问的代理服务器，使得所有的网络访问请求都通过它来完成，从而实现网络封包的截取和分析，以作为网络访问的监视器。当App连接charles代理访问互联网时，charles可以监控这个</description>
    </item>
    
    <item>
      <title>刘海屏适配</title>
      <link>https://iihui.github.io/post/ios-layout/</link>
      <pubDate>Mon, 17 Aug 2020 08:00:07 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-layout/</guid>
      <description>自从苹果推出刘海屏之后，App开发就要做相应的适配，适配过程通常会用到topLayoutGuide和bottomLayoutGuide或者safeAreaLayoutGuide。topLayoutGuide和bottomLayoutGuid</description>
    </item>
    
    <item>
      <title>UIImage</title>
      <link>https://iihui.github.io/post/ios-image/</link>
      <pubDate>Wed, 05 Aug 2020 11:46:48 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-image/</guid>
      <description>iOS开发的时候经常遇到要处理图片，这篇文章记录一下一些图片处理函数 添加外圆 /// 将图片裁剪为带外围⭕️的圆形图 /// - Parameters: /// - rail: 外围圆的宽度 /// - color: 外围圆的颜色 /// - Returns: 生成新的图片 func circleImageWidthRail(rail: CGFloat, color: UIColor) -&amp;gt; UIImage? { let size = CGSize(width: self.size.width + 2 * rail, height: self.size.height + 2 * rail) UIGraphicsBeginImageContextWithOptions(size, false, 0) let path = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: size.width,</description>
    </item>
    
    <item>
      <title>UITabBarController</title>
      <link>https://iihui.github.io/post/ios-uitabbar/</link>
      <pubDate>Sun, 02 Aug 2020 21:04:47 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-uitabbar/</guid>
      <description>添加Tab 既可以直接添加UITabBarController到storyboard中，也可以在现有的ViewController中添加UITabBarController。 直接添加 如下图所示，在Xcode 12右上角点击+号，然后输入Tab，</description>
    </item>
    
    <item>
      <title>Go枚举</title>
      <link>https://iihui.github.io/post/go-iota/</link>
      <pubDate>Sat, 01 Aug 2020 20:19:22 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-iota/</guid>
      <description>Go中没明确意义上的enum定义，但是可以借助iota来生成一组自增常量值来实现枚举，iota是一个比较奇怪的存在，它只能用在const的声明中，是一个从0开始的行数索引器。 iota 按行递增 首先，iota是一个行数索引器,它是按行递增的。 const ( x1 =</description>
    </item>
    
    <item>
      <title>Go常量</title>
      <link>https://iihui.github.io/post/go-let/</link>
      <pubDate>Sat, 01 Aug 2020 18:02:05 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-let/</guid>
      <description>常量值必须是编译期间可确定的字符、字符串、数字或者布尔值。常量的类型可以指定，或者由编译器通过初始化值推断，不支持C或者C++数字类型后缀。可在函数代码块中定义常量，不使用的常量不会引发编译错误。 const x, y int = 12, 0x12 const s = &amp;#34;hello world&amp;#34; const c = &amp;#39;我&amp;</description>
    </item>
    
    <item>
      <title>Go变量</title>
      <link>https://iihui.github.io/post/go-var/</link>
      <pubDate>Sat, 01 Aug 2020 16:05:43 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-var/</guid>
      <description>Go中每一个文件都以package声明开头，表明文件属于哪一个包。package声明后面是import声明，然后是不区分顺序的包级别的类型，变量、常量和函数的声明。对于包级别的声明不仅对于包含其声明的源文件可见，而且对于同一包里面的所有的源</description>
    </item>
    
    <item>
      <title>snapkit 使用</title>
      <link>https://iihui.github.io/post/ios-snapkit/</link>
      <pubDate>Fri, 31 Jul 2020 10:10:07 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-snapkit/</guid>
      <description>inset和offset 在描述view与superview关系时，应该使用inset，而描述view与同一层级的其它view时，应该使用offset。 使用offset来设置距离子控件相对于父控件边距时，对于右边和下方的约束都需要加-号。这和</description>
    </item>
    
    <item>
      <title>字典</title>
      <link>https://iihui.github.io/post/ios-dict/</link>
      <pubDate>Thu, 30 Jul 2020 08:18:10 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-dict/</guid>
      <description>字典合并 第一个字典先提供一些默认值，对于相同的key如果第二个字典中存在相应的value，则第一个字典的value被第二个字典覆盖掉。 // 默认字段 var defaultInfo: [String: Any] = [ &amp;#34;sys_id&amp;#34;: sysID, &amp;#34;type&amp;#34;: action.rawValue, &amp;#34;ystId&amp;#34;: activeUser.pid, &amp;#34;deviceId&amp;#34;: deviceID, &amp;#34;platform&amp;#34;: platform, &amp;#34;pubVer&amp;#34;: pubVersion, &amp;#34;buildVer&amp;#34;: buildVersion, &amp;#34;deviceModel&amp;#34;: deviceModel, &amp;#34;serverTime&amp;#34;: logTime, &amp;#34;deviceTime&amp;#34;: deviceTimeStr, &amp;#34;startTime&amp;#34;: logTime, &amp;#34;endTime&amp;#34;: logTime, &amp;#34;networkType&amp;#34;: networkInfo._networkType, &amp;#34;networkName&amp;#34;: networkInfo._networkName, &amp;#34;ip&amp;#34;: networkInfo.ip, &amp;#34;inuseId&amp;#34;: inuseID, &amp;#34;gpsLng&amp;#34;: gps.lng, &amp;#34;gpsLat&amp;#34;: gps.lat, ] if let _args = args</description>
    </item>
    
    <item>
      <title>时间相关处理</title>
      <link>https://iihui.github.io/post/ios-date/</link>
      <pubDate>Wed, 29 Jul 2020 19:21:23 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-date/</guid>
      <description>毫秒级时间戳距当前时间 /// 将毫秒级别的时间戳转换为约定的格式，0～60秒显示几秒前，1～60分显示xx分钟前，1～24小时显示xx小时前，1～10天显示xx天前，否则显示yyyy-MM-dd /// - Parameter timeStamp: 毫秒级别时间戳字符串 /// - Returns: 转换后的字符串 private func</description>
    </item>
    
    <item>
      <title>富文本</title>
      <link>https://iihui.github.io/post/ios-richtext/</link>
      <pubDate>Wed, 29 Jul 2020 18:59:27 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-richtext/</guid>
      <description>在文字后面添加红点 /// 使用富文本的方式在UILabel文本后面添加红点 /// - Parameter add: isNeedAdd 为true表示要加红点，否则不需要 /// - Returns: 处理后的富文本 func addRedDot(isNeedAdd: Bool) -&amp;gt; NSMutableAttributedString { var text: String = (self.text ?? &amp;#34;&amp;#34;) if isNeedAdd { text += &amp;#34; &amp;#34; let contentText = NSMutableAttributedString(string: text) let attach = NSTextAttachment() let dotImg = UIImage(named: &amp;#34;reddot&amp;#34;) let width: CGFloat = 10 attach.bounds = CGRect(x: 0, y: 0.5, width: width, height: width) attach.image = dotImg let attrText</description>
    </item>
    
    <item>
      <title>导航栏</title>
      <link>https://iihui.github.io/post/ios-navigation/</link>
      <pubDate>Wed, 29 Jul 2020 17:13:19 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-navigation/</guid>
      <description>仿导航栏添加阴影 // 设置阴影颜色 navBGView.layer.shadowColor = UIColor.lightGray.cgColor // 设置阴影偏移范围 navBGView.layer.shadowOffset = CGSize(width: 0, height: 1.8) // 设置阴影颜色的透明度 navBGView.layer.shadowOpacity = 0.2 // 设置阴影的半径 navBGView.layer.shadowRadius = 2.5 // 设置阴影路径 navBGView.layer.shadowPath = UIBezierPath.init(rect: navBGView.bounds).cgPath 通过设置1.2.3步仿导航栏的阴影就可以出现,如果对阴影有特别的需要,可再设置4.5这两个步骤。 参考资</description>
    </item>
    
    <item>
      <title>Live JavaScript debug</title>
      <link>https://iihui.github.io/post/safari-debug/</link>
      <pubDate>Tue, 07 Jul 2020 23:32:47 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/safari-debug/</guid>
      <description>从2020年4月开始，Safari支持Live JavaScript debug，使得在使用safari调试时可以使用本地文件覆盖从服务端下载的资源文件。Safari浏览器支持3种方式创建本地覆盖。 创建本地覆盖 第一种 首先选中某个文件，然后点击右上角创建覆盖图标，</description>
    </item>
    
    <item>
      <title></title>
      <link>https://iihui.github.io/post/ios-customizeuiview/</link>
      <pubDate>Fri, 03 Jul 2020 16:54:07 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-customizeuiview/</guid>
      <description>class RecommendView: UIView { @IBOutlet weak var imageView: UIImageView! @IBOutlet weak var subTitleLbl: UILabel! @IBOutlet weak var titleLbl: UILabel! @IBOutlet var contentView: UIView! override init(frame: CGRect) { //每一步都必须实现父初始化 super.init(frame: frame) contentView = loadViewFromNib() contentView.frame = bounds addSubview(contentView) } //可视化IB初始化调用 required init?(coder aDecoder: NSCoder) { super.init(coder: aDecoder) contentView = loadViewFromNib() contentView.frame = bounds addSubview(contentView) } //MARK：自定义方法 func loadViewFromNib() -&amp;gt; UIView { let nib = UINib(nibName: String(describing: RecommendView.self), bundle: Bundle(for: RecommendView.self)) let view = nib.instantiate(withOwner: self, options: nil)[0] as! UIView return view } } 参考资</description>
    </item>
    
    <item>
      <title>启动页修改</title>
      <link>https://iihui.github.io/post/ios-lanuch/</link>
      <pubDate>Wed, 01 Jul 2020 19:22:27 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-lanuch/</guid>
      <description>最近App改版，启动页也要随之修改，但是修改lanuchScreen.storyboard里的图片和样式之后并未立即生效。解决这个问题，主要分为三个步骤 图片不放xcassets中 启动页用到的图片资源，不要放入到*.xcassets中，应该直</description>
    </item>
    
    <item>
      <title>Swift 范型</title>
      <link>https://iihui.github.io/post/swift-generirs/</link>
      <pubDate>Tue, 30 Jun 2020 08:58:17 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-generirs/</guid>
      <description>范型类型 Swift允许自定义的范型类型包括类、结构体、枚举类型。 struct Stack { var items = [Int]() mutating func push(_ item:Int){ items.append(item) } mutating func pop(_ item:Int) -&amp;gt; Int { return items.removeLast() } } //调用 var stack_int = Stack() stack_int.push(7) stack_int.push(3) stack_int.push(2) print(stack_int)//Stack(items: [7, 3, 2]) 类型约束 范型函数和范型类型虽然可以和任何类型一起使用，但有时需要限制使用的类型，此时就需要使用类型</description>
    </item>
    
    <item>
      <title>Swift中defer</title>
      <link>https://iihui.github.io/post/swift-defer/</link>
      <pubDate>Sun, 28 Jun 2020 09:25:49 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-defer/</guid>
      <description>从语言设计上来说，defer是为了进行资源清理和返回前避免重复执行相关的代码，而不是用来取巧的实现某些功能，这样做只会让代码的可读性降低。 典型用法 Swift中defer声明的block会在当前代码执行退出后调用，这种延迟调用特性，一般用来进</description>
    </item>
    
    <item>
      <title>Swift5.3 新特性</title>
      <link>https://iihui.github.io/post/swift-5.3/</link>
      <pubDate>Sun, 28 Jun 2020 08:52:46 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-5.3/</guid>
      <description>Swift 5.3引入了很多新特性，包括多尾闭包，多模式catch以及Swift Package Manager的一些重要改变。 多尾闭包 在Swift5.3以前尾闭包提供了精简写法，但仅限于函数的最后一个参数为函数时。而当函数y有多个函数类型的参数时，如果该函数类型参</description>
    </item>
    
    <item>
      <title>Xcode编译报错问题</title>
      <link>https://iihui.github.io/post/ios-compiler/</link>
      <pubDate>Wed, 17 Jun 2020 10:06:46 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-compiler/</guid>
      <description>XXX-Swift.h未找到</description>
    </item>
    
    <item>
      <title>Word 小技巧</title>
      <link>https://iihui.github.io/post/sofer-word/</link>
      <pubDate>Wed, 10 Jun 2020 16:17:21 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/sofer-word/</guid>
      <description>修改默认显示语言 如果Mac系统设置为英文，安装Word之后显示语言默认为英文，为了设置中文显示，可以先关闭Word，然后执行如下命令： defaults write com.microsoft.Word AppleLanguages &amp;#39;(&amp;#34;zh-cn&amp;#34;)&amp;#39; 其中com.microsoft.Word是Word的ID，可以通过下图所示步骤查看，即最后一张图</description>
    </item>
    
    <item>
      <title>屏幕旋转</title>
      <link>https://iihui.github.io/post/ios-rotate/</link>
      <pubDate>Mon, 08 Jun 2020 20:07:26 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-rotate/</guid>
      <description>iOS开发时经常会遇到要将某些界面强制竖屏或者横屏。要做到某个页面能强制横竖屏的前提是允许屏幕旋转，然后再在具体的界面强制横竖屏。但是要区分这个具体的界面时push还是present呈现的。 全局允许横竖屏 第一种方式，是在Target中的Ge</description>
    </item>
    
    <item>
      <title>WCDB</title>
      <link>https://iihui.github.io/post/ios-wcdb/</link>
      <pubDate>Mon, 25 May 2020 23:18:53 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-wcdb/</guid>
      <description>自定义类型入库 自定义类型要遵循ColumnCodable才能入库： enum UserOrgType: String, ColumnCodable { case CMB = &amp;#34;CMB&amp;#34; case ODC = &amp;#34;3&amp;#34; static var columnType: ColumnType = .text init(with value: FundamentalValue) { self = UserOrgType(rawValue: value.stringValue) ?? UserOrgType.CMB } func archivedValue() -&amp;gt; FundamentalValue { return FundamentalValue(self.rawValue) } } /// 查看用户表是否为空 func isEmpty() -&amp;gt; Bool { do { let count = try DBManager_V2.shared.userDb.getValue(on: UserInfoModel_V2.CodingKeys.openId.count(), fromTable: tableName).int64Value return count == 0 } catch let error { printError(msg: error.localizedDescription, type: .db) return true } }</description>
    </item>
    
    <item>
      <title>UIAlertViewController</title>
      <link>https://iihui.github.io/post/ios-alertviewcontroller/</link>
      <pubDate>Mon, 20 Apr 2020 22:58:33 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-alertviewcontroller/</guid>
      <description>最近使用UIAlertViewController时，需要定制其背景颜色，在网上找到一个解决方案，基本思路是为UIAlertViewController设置一个计算属性，这个属性改变时即将UIAlertViewController的背景色修</description>
    </item>
    
    <item>
      <title>linux 命令大全</title>
      <link>https://iihui.github.io/post/linux-base/</link>
      <pubDate>Sat, 18 Apr 2020 22:23:57 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/linux-base/</guid>
      <description>这篇笔记是学习Linux命令大全的读书笔记，用于记录那些个人认为有用的命令，供后续查询。 shell 是什么 df df命令用于磁盘驱动器当前的可用空间 free free命令可以显示可用内存</description>
    </item>
    
    <item>
      <title>vim 学习</title>
      <link>https://iihui.github.io/post/tool-vim/</link>
      <pubDate>Sat, 18 Apr 2020 21:18:10 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/tool-vim/</guid>
      <description>配置文件 vim从一个名为.vimrc（在类Unix系统中，以.开头的文件为隐藏文件，为了看到这些文件，可以运行ls -a命令行）的文件中读取配置信息。 syntax on &amp;#34;支持语法高亮显示 filetype plugin indent on &amp;#34;启用根据文件类型缩进 set autoindent &amp;#34;开启新行时</description>
    </item>
    
    <item>
      <title>Mach-O 文件</title>
      <link>https://iihui.github.io/post/ios-macho/</link>
      <pubDate>Wed, 01 Apr 2020 08:09:20 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-macho/</guid>
      <description>Mach-O为Mach Object文件格式的缩写，它是一种用于可执行文件、目标代码、动态库的文件格式。 文件类型 常见的MachO文件有下面这些，可以通过file+文件路径来查看文件的类型信息： 目标文件.o 库文件.a | .dylib | xxx.framework/xxx 可执行文件 符号表文件</description>
    </item>
    
    <item>
      <title>创建私有库</title>
      <link>https://iihui.github.io/post/ios-private-pods/</link>
      <pubDate>Tue, 31 Mar 2020 19:52:58 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-private-pods/</guid>
      <description>使用cocoapods可以创建远程私有库，供项目使用。首先需要在github上创建一个远程索引库，然后使用cocopods在本地创建文件夹，并与远程私有库进行关联。再在github上创建远程组件库，接着使用pod创建本地工程，然后修改组件库</description>
    </item>
    
    <item>
      <title>指定Podfile中source</title>
      <link>https://iihui.github.io/post/ios-pods-question/</link>
      <pubDate>Tue, 31 Mar 2020 08:08:00 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-pods-question/</guid>
      <description>在笔记本上安装好Cocoapods之后，执行pod install后报trunk repo update failed，解决方案是在Podfile中指定另一个源仓库。 报错信息 解决方案 解决方案是在Podfile中指定source，如下所示： platform :ios, &amp;#39;8.0&amp;#39; source &amp;#39;https://github.com/CocoaPods/Specs.git&amp;#39; use_frameworks! target &amp;#39;NewWCDB&amp;#39; do pod &amp;#39;WCDB.swift&amp;#39; end 如</description>
    </item>
    
    <item>
      <title>验证码绑定界面</title>
      <link>https://iihui.github.io/post/ios-login/</link>
      <pubDate>Sat, 28 Mar 2020 15:43:49 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-login/</guid>
      <description>验证码绑定，包括个人账户，和虚拟账户。之前写的验证码绑定界面扩展性太差，这次决定尝试使用tableView实现验证码绑定界面，主要是为了增加可扩展性，便于当需要增加新的验证信息时，可以不大动原界面。这篇文章是对应的ViewControlle</description>
    </item>
    
    <item>
      <title>AutoLayout</title>
      <link>https://iihui.github.io/post/ios-autolayout/</link>
      <pubDate>Wed, 25 Mar 2020 11:52:16 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-autolayout/</guid>
      <description>苹果公司推出的AutoLayout是一个基于约束，动态计算视图大小和位置的库。它以布局引擎系统Layout Engine为核心，采用了Cassowary布局算法，在简化布局思路的同时，还保证了布局的高效性。布局算法Cassowary能够有效解</description>
    </item>
    
    <item>
      <title>不常见的关键字</title>
      <link>https://iihui.github.io/post/ios-keywords/</link>
      <pubDate>Wed, 25 Mar 2020 10:22:29 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-keywords/</guid>
      <description>使用Swift写代码时，经常会遇到一些不常见的关键词或者常用关键词的特殊使用场景，因为比较少使用，通常这些不常见的关键词或者特殊场景很容易忘记，这篇文章用于记录这些情况。 便利构造函数 convenience用于构造函数中，称之为便利构造函数。</description>
    </item>
    
    <item>
      <title>Keyboard Maestro 使用</title>
      <link>https://iihui.github.io/post/tool-maestro/</link>
      <pubDate>Tue, 24 Mar 2020 11:28:02 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/tool-maestro/</guid>
      <description>Keyboard Maestro是一款神奇的软件，在我心里它和Alfred同样重要，是装机必备软件。使用它可以省去安装很多软件，这篇文章记录在平常工作中使用它的一些特性或技巧，以供后续查阅。 快捷输入 粘贴 键盘 打开应用 开启和关闭wifi 窗口 左半屏 右半屏 最大化 全</description>
    </item>
    
    <item>
      <title>git 使用</title>
      <link>https://iihui.github.io/post/tool-git/</link>
      <pubDate>Tue, 24 Mar 2020 09:36:27 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/tool-git/</guid>
      <description>清理文件 本地.git文件太大，可以使用git gc命令清理不必要的文件并优化本地存储库，其中gc是garbage collection的缩写: git gc [--aggressive] [--auto] [--quiet] [--prune=&amp;lt;date&amp;gt; | --no-prune] [--force] [--keep-largest-pack] 更多参数讲解 大小写敏感 默认情况下git追踪的项目对文件名大小写是不敏感的，但是gi</description>
    </item>
    
    <item>
      <title>pcm No such file or directory</title>
      <link>https://iihui.github.io/post/ios-pcm-warnning/</link>
      <pubDate>Mon, 23 Mar 2020 15:15:31 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-pcm-warnning/</guid>
      <description>在封装静态framework时，在本机上没有报任何警告，在其他机器上却报warning: ***/Library/Developer/Xcode/DerivedData/ModuleCache.noindex/2MSIKR0H4Y5WQ/Foundation-A3SOD99KJ0S9.pcm: No such file or directory警告。这篇文章就是解决这个警告问题，主要是改变工程的build setting有三个地方需要修改，暂且归为三步。 第一步 首先在B</description>
    </item>
    
    <item>
      <title>强制浅色模式</title>
      <link>https://iihui.github.io/post/ios-light-style/</link>
      <pubDate>Sun, 22 Mar 2020 06:18:48 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-light-style/</guid>
      <description>iOS 13之后，一旦使用了系统的组件，如果用户开启了深色模式，则这些组件的颜色会随着发生变化，而此时某些使用了自定义颜色的组件对应的颜色不会改变，如此将会非常难看。一个简单的方式是强制App为浅色模式，使得系统开启了深色模式后，App还是之前的</description>
    </item>
    
    <item>
      <title>iOS tips</title>
      <link>https://iihui.github.io/post/ios-tips/</link>
      <pubDate>Thu, 19 Mar 2020 21:27:43 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-tips/</guid>
      <description>类与结构体 共同点 定义属性用于存储值 定义方法用于提供方法 定义下标操作使得可以通过下标语法来访问实例所包含的值 定义构造器用于生成初始值 通过扩展协议来增加默认实现的功能 实现协议来提供某种标准功能 类多一点 允许一个类继承另一个类的特镇 类型转换允许在运</description>
    </item>
    
    <item>
      <title>AES 实现</title>
      <link>https://iihui.github.io/post/ios-aes/</link>
      <pubDate>Tue, 17 Mar 2020 17:24:04 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-aes/</guid>
      <description>高级加密标准(AES,Advanced Encryption Standard)，是美国联邦政府采用的一种区块加密标准。这个标准用来替代原先的DES，已经被多方分析且广为全世界所使用是最常见的对称加密算法，它是一种对称加密算法（对称加密是指加密和解密使用相同的密</description>
    </item>
    
    <item>
      <title>CLion 添加Google test</title>
      <link>https://iihui.github.io/post/clion-test/</link>
      <pubDate>Fri, 06 Mar 2020 18:00:27 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/clion-test/</guid>
      <description>首先在github下载最新的googletest，解压之后重命名为googletest。然后将其放入到CLion工程目录下，接着修改工程的CMakeList.txt文件。最后，修改main函数，编写单元测试用例。 下载 在github下载最新的</description>
    </item>
    
    <item>
      <title>iOS开发使用Safari调试WebView</title>
      <link>https://iihui.github.io/post/ios-debug-safari/</link>
      <pubDate>Thu, 27 Feb 2020 06:14:27 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-debug-safari/</guid>
      <description>在Mac上调试iOS WebView既需要在Mac上的Safari浏览器上开启开发者选项，也需要在iOS设备上开启Web检查功能。 开启Mac的开发者菜单 首先需要开启Mac上Safari浏览器的显示开发者菜单选项。即先进入到Safari浏览器中</description>
    </item>
    
    <item>
      <title>where 关键字</title>
      <link>https://iihui.github.io/post/ios-where/</link>
      <pubDate>Sat, 22 Feb 2020 20:49:20 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-where/</guid>
      <description>Swift中的where关键字主要用于限定条件，既可在switch语句中使用，也可以在for中使用，还可以用在扩展中用于限定应该遵循某种协议。 switch中 在switch语句中使用，where一般是配合if let来用于限定某些条件，例如： let</description>
    </item>
    
    <item>
      <title>Swift 方法交换中的addMethod</title>
      <link>https://iihui.github.io/post/ios-addmethod/</link>
      <pubDate>Fri, 21 Feb 2020 10:18:17 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-addmethod/</guid>
      <description>Swizzle是OC的黑魔法之一，可以在运行时对两个方法的实现进行交换，也就是用户可以用自己的方法替换原来的方法实现，做一些其它事情。Swift也可以使用运行时的方法交换，如果要了解Swift的方法交换，首先应该了解class_addMet</description>
    </item>
    
    <item>
      <title>Any,AnyObject,AnyClass</title>
      <link>https://iihui.github.io/post/ios-any/</link>
      <pubDate>Tue, 18 Feb 2020 21:14:39 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-any/</guid>
      <description>最近在看Swift中的方法交换，遇到Any、AnyObject与AnyClass次数挺多的，所以在网上找了一些文章看了一下，以此为记。 AnyObject AnyObject类似于OC中的id类型，表示任意的class类型。但在Swift中由于String、A</description>
    </item>
    
    <item>
      <title>UIControl</title>
      <link>https://iihui.github.io/post/ios-uicontrol/</link>
      <pubDate>Fri, 14 Feb 2020 20:53:50 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-uicontrol/</guid>
      <description>UIControl是UIView的子类，也是UIResponder的子类。是UIButton，UISwitch，UITextField等控件的父类。它本身定义了一些属性和方法，但是不能直接使用。 方法交换 extension UIControl { class func swizzleMethod() { struct Static { static var token = NSUUID().uuidString } // 确保</description>
    </item>
    
    <item>
      <title>Swift 中的反射</title>
      <link>https://iihui.github.io/post/ios-reflection/</link>
      <pubDate>Fri, 14 Feb 2020 17:19:38 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-reflection/</guid>
      <description>在计算机学中，reflection(反射)是指计算机程序在runtime时可以访问、检测和修改它本身状态或行为的一种能力。比较形象的说法就是，反射是程序在运行的时候能够观察并且修改自己的行为。 @objc Swift是一门静态语言，和OC不同，不能在运</description>
    </item>
    
    <item>
      <title>KVC 键值编码</title>
      <link>https://iihui.github.io/post/ios-kvc/</link>
      <pubDate>Thu, 13 Feb 2020 13:10:08 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-kvc/</guid>
      <description>KVC(Key Value Coding)键值编码，指允许通过Key名字来直接访问对象的属性，而不需要调用明确的存取方法。这样，便能在运行时动态地访问和修改对象的属性值。在iOS中，无论是Swift还是OC，KVC都是通过对NSObject的扩展来实现的。所以，继</description>
    </item>
    
    <item>
      <title>工具使用备忘录</title>
      <link>https://iihui.github.io/post/tool-usage/</link>
      <pubDate>Thu, 13 Feb 2020 11:50:55 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/tool-usage/</guid>
      <description>使用Mac时候会安装各种工具，例如Visual Studio Code，XCode，itemr2，AppCode等等。在这些工具的使用过程中，经常也会遇到一些问题，查了之后容易忘记，以此为记，以期节省时间。 Visual Studio Code 列模式 快捷键为shift + option + 单击，即可开</description>
    </item>
    
    <item>
      <title>飞书特色功能</title>
      <link>https://iihui.github.io/post/ios-feishu/</link>
      <pubDate>Tue, 11 Feb 2020 07:12:18 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-feishu/</guid>
      <description>飞书把更多的需求优化倾向于团队成员，而不是管理者。所以它以「即时沟通」为中心，将在线文档、云盘、日历等功能全部整合在一起。 例如，可以在IM（即时通讯）界面直接创建文档，共同编辑，也可以在文档中进一步讨论细节问题；或是发起一个日程，在日程中直</description>
    </item>
    
    <item>
      <title>iOS 可视化埋点</title>
      <link>https://iihui.github.io/post/ios-log-point/</link>
      <pubDate>Sun, 09 Feb 2020 16:54:52 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-log-point/</guid>
      <description>埋点方案大体上可以归为3类：代码埋点，可视化埋点，无埋点。代码埋点，由开发人员在触发事件的具体方法里，植入多行代码把需要上传的数据发送至服务端。可视化埋点，根据标识来识别每一个事件，针对指定的事件进行取参埋点。而事件的标识与参数信息都写在配</description>
    </item>
    
    <item>
      <title>H5 性能监控</title>
      <link>https://iihui.github.io/post/ios-h5-monitoring/</link>
      <pubDate>Wed, 05 Feb 2020 08:26:00 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-h5-monitoring/</guid>
      <description>UIWebView 和 UIWKWebView 目前iOS中有两个加载网页的类，分别是UIWebView和WKWebView，UIWebView是UIKit框架中的一个类，而WKWebView是WebKit框架中的类。 从性能上来说WKWebView的性能高、稳定性好、占用内存小，完</description>
    </item>
    
    <item>
      <title>Objective-C Runtime</title>
      <link>https://iihui.github.io/post/oc-runtime/</link>
      <pubDate>Tue, 04 Feb 2020 13:15:10 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/oc-runtime/</guid>
      <description>Objective-C扩展了C语言，并加入了面向对象特性和Smalltalk式的消息传递机制。而这个扩展的核心是一个用C写的Runtime库，它是OC面向对象和动态机制的基石。OC的Runtime用于创建类对象、进行消息传递和转发。理解OC</description>
    </item>
    
    <item>
      <title>陈小厨作品</title>
      <link>https://iihui.github.io/post/food-2020/</link>
      <pubDate>Mon, 03 Feb 2020 13:28:05 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/food-2020/</guid>
      <description>2020年给自己定了些年度目标，用心下厨是其中一项。我是一个喜欢倒腾吃的人，每次看到自己做的东西既美味又有颜值的时候，总会很开心，但多数时候都忘了记录大致的步骤和拍照留存，2020年想给自己多留点值得回忆的东西，故以此为记。 二月作品 猪血丸子</description>
    </item>
    
    <item>
      <title>macOS 安装Homebrew 报错</title>
      <link>https://iihui.github.io/post/qa_install_brew/</link>
      <pubDate>Fri, 31 Jan 2020 16:28:55 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/qa_install_brew/</guid>
      <description>重装了macOS Catalina 10.15.2，但使用/usr/bin/ruby -e &amp;quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&amp;quot;安装Homebrew时报</description>
    </item>
    
    <item>
      <title>Almofire的使用</title>
      <link>https://iihui.github.io/post/ios-alamofire/</link>
      <pubDate>Sat, 28 Dec 2019 21:08:45 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-alamofire/</guid>
      <description>如果使用过OC进行开发，那么知道AFNetworking这个网络操作库。Mattt Thompson作为AFNetworking的发起人，又基于Swift语言开发了一个新的网络操作库 Alamofire。Alamofire的优雅之处在于它完完全</description>
    </item>
    
    <item>
      <title>UITableView 使用</title>
      <link>https://iihui.github.io/post/ios-uitableview/</link>
      <pubDate>Tue, 17 Dec 2019 14:08:45 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-uitableview/</guid>
      <description>在iOS开发中，UITableView的使用频率较高，这篇文章主要用于记录一些常用的使用方法和问题解决方案。 点击cell不变色 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell { let cell = tableView.dequeueReusableCell(withIdentifier: cellId, for: indexPath) as! NoteDetailInfoCell cell.selectionStyle = .none //点击该cell不变色 return cell } Cell异步更新 在UITableView</description>
    </item>
    
    <item>
      <title>贵州之行</title>
      <link>https://iihui.github.io/post/travel-guizhou/</link>
      <pubDate>Tue, 07 May 2019 09:24:11 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/travel-guizhou/</guid>
      <description>黄果树瀑布景区 娄山关 外伶仃岛</description>
    </item>
    
    <item>
      <title>第三方库放到Cocoapods中</title>
      <link>https://iihui.github.io/post/ios-cocoapods-storage/</link>
      <pubDate>Fri, 01 Mar 2019 09:34:41 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-cocoapods-storage/</guid>
      <description>项目需要引入百度语音合成SDK，但这个第三方库的.a文件过于庞大，按规定不能直接放到项目中，需要放到Cocoapods仓库中，然后在项目中依赖一下即可。用已有的模板，只要按照要求修改对应文件，然后执行相应命令即可，这一过程可以总结为5步。 第</description>
    </item>
    
    <item>
      <title>引入百度语音合成</title>
      <link>https://iihui.github.io/post/ios-synthesizer/</link>
      <pubDate>Thu, 28 Feb 2019 11:08:15 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-synthesizer/</guid>
      <description>项目中需要用百度语音合成SDK，因此自己先建了一个工程作为引入测试一下，总结下来为准备&amp;ndash;&amp;gt;导入&amp;ndash;&amp;gt;创建应用&amp;ndash;&amp;gt;测试。 准备 首先从百度官网下载百度语音合成的SDK,如下图所示首先在左边选择语</description>
    </item>
    
    <item>
      <title>H5视频播放</title>
      <link>https://iihui.github.io/post/ios-html-player/</link>
      <pubDate>Mon, 25 Feb 2019 08:52:09 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-html-player/</guid>
      <description>近期APP出现了在iPhone上拍的视频，同步到Android手机后播放不了的问题，第一直觉应该是iPhone上录制视频所使用的编码不兼容Android。经过沟通，了解到播放视频是用H5嵌入的，因为手边没有视频播放源码和可测试的Androi</description>
    </item>
    
    <item>
      <title>半透明的悬浮提示窗</title>
      <link>https://iihui.github.io/post/ios-alert-window/</link>
      <pubDate>Sun, 24 Feb 2019 19:50:43 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-alert-window/</guid>
      <description>项目中需要一个悬浮提示窗，从网上找到一篇以OC为示例的文章，因为公司项目是Swift写的，因此需要将OC转为Swift。 OC代码 .h文件 //CustomAlertWindow.h #import &amp;lt;UIKit/UIKit.h&amp;gt; typedef NS_ENUM(NSInteger, AlertWindowPositionOption) { AlertWindowPositionTopMiddle = 0, AlertWindowPositionCenter, AlertWindowPositionBottomMiddle }; @interface CustomAlertWindow : UIWindow + (instancetype)aletWindowWithPositionOption:(AlertWindowPositionOption)positionType andInfoText:(NSString *)text; //显示 - (void)show; // 消失 - (void)dismiss; @end .m文件 //CustomAlertWindow.m #import &amp;#34;CustomAlertWindow.h&amp;#34; #define LABEL_MARGIN 10 //Label的外</description>
    </item>
    
    <item>
      <title>UIWebview 加载含特殊字符网页</title>
      <link>https://iihui.github.io/post/ios-webview-html/</link>
      <pubDate>Sun, 24 Feb 2019 18:57:05 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-webview-html/</guid>
      <description>UIWebview中加载的html文件中如果含有\n,&#39;等特殊字符时，显示为一片空白。查阅资料得知需要将这些特殊字符进行预处理。 预处理 class HTMLUtils{ static func escapsedHTML(html: String)-&amp;gt;String{ var result = html if !result.isEmpty{ result = result.replacingOccurrences(of: &amp;#34;\\&amp;#34;, with: &amp;#34;\\\\&amp;#34;) result = result.replacingOccurrences(of: &amp;#34;\&amp;#34;&amp;#34;, with: &amp;#34;\\\&amp;#34;&amp;#34;) result = result.replacingOccurrences(of: &amp;#34;&amp;#39;&amp;#34;, with: &amp;#34;\\&amp;#39;&amp;#34;) result = result.replacingOccurrences(of: &amp;#34;\r&amp;#34;, with: &amp;#34;\\r&amp;#34;) result = result.replacingOccurrences(of: &amp;#34;\n&amp;#34;, with: &amp;#34;\\n&amp;#34;) } return result } }</description>
    </item>
    
    <item>
      <title>JS事件捕获</title>
      <link>https://iihui.github.io/post/js-event/</link>
      <pubDate>Fri, 25 Jan 2019 11:13:43 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/js-event/</guid>
      <description>DOM事件从发生到开始经历了三个阶段，分别为捕获阶段、命中阶段以及冒泡阶段。捕获阶段表示从最上层开始，直到最下层(点击的那个target元素)，路过的所有节点都可以捕获到该事件。命中阶段:如果某个事件到达了target，它就会进行处理。冒泡</description>
    </item>
    
    <item>
      <title>使用Visual Code的文件对比功能</title>
      <link>https://iihui.github.io/post/qa-compare/</link>
      <pubDate>Tue, 22 Jan 2019 08:39:53 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/qa-compare/</guid>
      <description>在使用坚果云的时候，由于较长时间没有同步，导致本地文件和云端文件冲突，再次同步时，坚果云保留了两个版本。为了弄清两个文件的差异，以进行修改，需要一个工具来比对。最初是想下载一个专门的文件对比软件，但转念一想或许Visual Code可以呢，一</description>
    </item>
    
    <item>
      <title>创建新的Target</title>
      <link>https://iihui.github.io/post/ios-new-target/</link>
      <pubDate>Thu, 10 Jan 2019 11:18:46 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-new-target/</guid>
      <description>项目需要新建一条众测流水线，因此首先需要基于DEV环境新建一个Target，然后将新建的Target配置到新建的流水线上。 Duplicate 新Target的创建一般以已有的Target为模板，如下图所示，首先选中模板Target，然后右键点击选中Dupli</description>
    </item>
    
    <item>
      <title>Range的保存与恢复</title>
      <link>https://iihui.github.io/post/js-focus-save/</link>
      <pubDate>Wed, 09 Jan 2019 16:58:44 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/js-focus-save/</guid>
      <description>在iOS 11.3以下的UIWebview中插入图片时，因图片选择器的弹出导致UIWebview失去焦点，故在插入图片前需先保存图片将要插入的位置。 保存range区域 图片选择器打开前，利用一个全局的Range对象保存插入前光标所在的位置的Ra</description>
    </item>
    
    <item>
      <title>Swift访问权限</title>
      <link>https://iihui.github.io/post/ios-access-level/</link>
      <pubDate>Wed, 09 Jan 2019 09:18:25 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-access-level/</guid>
      <description>访问权限用于限制部分代码被其它源文件或者模块访问，目的是隐藏某些代码的实现细节。在Swift中可以设置类型(类、结构和枚举)的访问权限，也可以设置属性和方法的访问权限。Swift提供了5个访问级别，这些访问级别以模块和源文件为区分粒度。 模块</description>
    </item>
    
    <item>
      <title>img添加和取消点击监听</title>
      <link>https://iihui.github.io/post/js-image-addclicklistener/</link>
      <pubDate>Tue, 08 Jan 2019 19:46:39 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/js-image-addclicklistener/</guid>
      <description>一篇图文笔记可能有多张图片，目前的需求为单击图片后开始预览图片。想到的解决思路有两种，第一种是为每张图片添加点击事件的监听，这种方式的麻烦在于要监听是否有新图片插入，一旦有新图片插入时则要对其加入点击事件的监听；第二种则是全局监听点击事件，</description>
    </item>
    
    <item>
      <title>img点击监听</title>
      <link>https://iihui.github.io/post/js-image-clickedlistener/</link>
      <pubDate>Tue, 08 Jan 2019 19:46:39 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/js-image-clickedlistener/</guid>
      <description>一篇图文笔记可能有多张图片，目前的需求为单击图片后开始预览图片。想到的解决思路有两种，第一种是为每张图片添加点击事件的监听，这种方式的麻烦在于要监听是否有新图片插入，一旦有新图片插入时则要对其加入点击事件的监听；第二种则是全局监听点击事件，</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://iihui.github.io/post/ios-singleton/</link>
      <pubDate>Mon, 07 Jan 2019 23:29:33 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-singleton/</guid>
      <description>单例模式(Singleton Pattern)属于创建型模式，该模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有一个单例对象被创建。 第一种方式 利用Swift中全局变量的懒加载和全局变量初始化时默认使用dispatch_once以保</description>
    </item>
    
    <item>
      <title>基于PageController的图片预览</title>
      <link>https://iihui.github.io/post/ios-image-preview/</link>
      <pubDate>Sat, 05 Jan 2019 11:49:11 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-image-preview/</guid>
      <description>参考资料 参考资料 参考资料 参考资料</description>
    </item>
    
    <item>
      <title>LLDB 调试</title>
      <link>https://iihui.github.io/post/ios-debug/</link>
      <pubDate>Fri, 04 Jan 2019 14:15:45 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-debug/</guid>
      <description>LLDB是一个庞大的工具,内置了许多有用的命令。 命令语法结构 &amp;lt;command&amp;gt; [&amp;lt;subcommand&amp;gt; [&amp;lt;subcommand&amp;gt;...]] &amp;lt;action&amp;gt; [-options [option-value]] [argument [argument...]] 其中： command和subcommand为LLDB调试命令的名称，命令和子命令按照层级结构来排列：一个命令对象为跟随其的子命令对象创建一个上下文，子命令又为其子命</description>
    </item>
    
    <item>
      <title>多图片选择</title>
      <link>https://iihui.github.io/post/ios-image-selector/</link>
      <pubDate>Fri, 04 Jan 2019 09:51:58 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-image-selector/</guid>
      <description>第一步 JSAPI中有个文件选择器，而文件选择器中有选择多个图片的功能。首先在WebviewController.swift中找到: case UrlSchema.fileSelectorSchema.rawValue: //文件选择器 fileSelectorService.presentFileSelector(self.webConfig, params: paramDic) 第二步 首先查看fileSelectorService的创建: fileprivate lazy var fileSelectorService: FileSelectorService = FileSelectorService(callbackDelegate: self) 而File</description>
    </item>
    
    <item>
      <title>Swift中for循环</title>
      <link>https://iihui.github.io/post/swift-for-in/</link>
      <pubDate>Fri, 04 Jan 2019 08:16:45 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-for-in/</guid>
      <description>Swift中只有一种形式for循环，即for in。但是for-in有多种形式，既包括常规用法又包括区间循环。 常规用法 常规用法一般用于直接访问数组中的元素，可以分为直接访问和按索引访问： let arr = [34,78,789,-12] for item in arr{ print(item) } 在OC中是通过索引i来访问数组中的元</description>
    </item>
    
    <item>
      <title>基本内排序算法Swift实现</title>
      <link>https://iihui.github.io/post/ios-sort/</link>
      <pubDate>Mon, 31 Dec 2018 09:21:01 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-sort/</guid>
      <description>排序就是重新排列表中的元素，使表中的元素满足按关键字递增或者递减的排列过程。排序算法分为内排序和外排序。内排序是指排序期间元素全部放在内存中的排序；而外排序是指在排序期间元素太多，不能同时存放在内存中，必须在排序过程中根据要求，不断在内，外</description>
    </item>
    
    <item>
      <title>iOS允许HTTP请求</title>
      <link>https://iihui.github.io/post/ios-http/</link>
      <pubDate>Sat, 29 Dec 2018 11:05:00 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-http/</guid>
      <description>在iOS 9之后，苹果默认要求App访问的url必须为https的安全链接，为了能在项目中请求Http链接，需要在项目中自动生成的Info.plist文件里，将App Transport Security Settings下的Allow Arbitrary Loads设置为YES「如果没有则先添加</description>
    </item>
    
    <item>
      <title>Framework</title>
      <link>https://iihui.github.io/post/ios-framework/</link>
      <pubDate>Tue, 25 Dec 2018 11:45:01 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-framework/</guid>
      <description>链接库 库是一种共享程序代码的方式，分为静态库和动态库。静态库链接时被完整地拷贝到可执行文件，多次使用时就会有多个副本。 而动态库在链接时不复制，程序运行时由系统动态加载到内存，供程序调用。动态库只加载一次到内存，然后供多个程序共用，以节省内存</description>
    </item>
    
    <item>
      <title>桥接文件</title>
      <link>https://iihui.github.io/post/ios-bridge/</link>
      <pubDate>Mon, 24 Dec 2018 23:41:52 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-bridge/</guid>
      <description>因为历史原因，在使用Swift编程时，常常需要用到OC类中的方法，此时就需要使用桥接文件来引入OC中的头文件，以告诉Swift。 手动创建桥接文件 第一步 首先使用快捷键Command+N来新建一个文件： 第二步 选择Header File: 第三步 给Heade</description>
    </item>
    
    <item>
      <title>WKWebView</title>
      <link>https://iihui.github.io/post/ios-wkwebview/</link>
      <pubDate>Mon, 24 Dec 2018 08:47:19 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-wkwebview/</guid>
      <description>self.webView.scrollView.addObserver(self, forKeyPath: &amp;#34;contentSize&amp;#34;, options: .new, context: nil) } override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) { if let key = keyPath, key == &amp;#34;contentSize&amp;#34;{ let fittingSize = self.webView.sizeThatFits(CGSize.zero) self.webView.frame = CGRect(x: 0, y: noteTitleTextField.frame.height, width: fittingSize.width, height: fittingSize.height) } } </description>
    </item>
    
    <item>
      <title>JS的prototype</title>
      <link>https://iihui.github.io/post/js-prototype/</link>
      <pubDate>Thu, 20 Dec 2018 19:43:47 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/js-prototype/</guid>
      <description>在JS中，每当定义一个对象(函数也是对象)时，对象中都会包含一些预定义的属性；每个对象都有一个prototype对象，这个属性指向函数的原型对象。 原型对象 缘由 Brendan Eich在设计JS时，将所有的数据类型都设计为对象，因此需要有一种机制将这些对象</description>
    </item>
    
    <item>
      <title>iOS 版本检查</title>
      <link>https://iihui.github.io/post/ios-new-version/</link>
      <pubDate>Thu, 20 Dec 2018 11:53:15 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-new-version/</guid>
      <description>首先由AboutViewController中的presenter调用其requestLastestVersion方法，而presenter是 AboutPresenter类的实例： lazy var presenter:AboutPresenter = AboutPresenter(delegate:self) presenter.requestLatestVersion() AboutPresenter类 而AboutPre</description>
    </item>
    
    <item>
      <title>javascript 中this指针</title>
      <link>https://iihui.github.io/post/js-this/</link>
      <pubDate>Wed, 19 Dec 2018 15:59:17 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/js-this/</guid>
      <description>在JavaScript中，this是动态绑定，或称为运行期绑定的，这导致JavaScript中的this关键字具有多重含义。它可以是全局对象、当前对象或者任意对象，这完全取决于函数的调用方式。 作为对象方法调用 在JS中，函数也是对象，因此函数</description>
    </item>
    
    <item>
      <title>html 元素分类</title>
      <link>https://iihui.github.io/post/html-element-category/</link>
      <pubDate>Wed, 19 Dec 2018 10:48:17 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/html-element-category/</guid>
      <description>元素分类 HTML元素，指的是从开始标签(start tag)到结束标签(end tag)的所有代码。 HTML元素包括顶级元素，块级元素，内联元素。 顶级元素 html body frameset 块级元素 以块显示的元素，高度宽度都是可以设置的。块级元素默认状态下每次都占据一整行，</description>
    </item>
    
    <item>
      <title>盒子模型</title>
      <link>https://iihui.github.io/post/html-box-model/</link>
      <pubDate>Tue, 18 Dec 2018 10:39:23 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/html-box-model/</guid>
      <description>W3C组织建议把网页上所有的对象都放在一个盒(box)中，设计师可以在对象创建时控制这个盒子的属性，这些对象包括段落、列表、标题、图片以及层。盒模型主要定义四个区域：内容(content)、内边距(padding)、边框(border)和外</description>
    </item>
    
    <item>
      <title>selection 对象</title>
      <link>https://iihui.github.io/post/js-selection/</link>
      <pubDate>Mon, 17 Dec 2018 16:46:24 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/js-selection/</guid>
      <description>在富文本编辑器中，需要控制光标的各种状态信息，位置信息。浏览器提供了selection对象和range对象来操作光标。 selection Selection对象表示用户选择的文本范围或插入符号的当前位置。它代表页面中的文本选区，可能横跨多个元素(elemen</description>
    </item>
    
    <item>
      <title>KVO 介绍</title>
      <link>https://iihui.github.io/post/ios-kvo/</link>
      <pubDate>Mon, 17 Dec 2018 15:09:08 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-kvo/</guid>
      <description>在应用开发中，经常需要使用观察者模式，以监听某些对象属性的变化，然后进行相应操作。OC提供了一套简洁优雅的观察方式——KVO。KVO(key-value observing)是一种通知机制，当指定的被观察者对象的属性被修改时，KVO会自动通知</description>
    </item>
    
    <item>
      <title>给图片添加点击监听</title>
      <link>https://iihui.github.io/post/js-img/</link>
      <pubDate>Mon, 17 Dec 2018 08:34:15 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/js-img/</guid>
      <description>给所有图片添加监听 function setImagesClick(){ $(&amp;#39;body&amp;#39;).on(&amp;#39;click&amp;#39;,&amp;#39;img&amp;#39;,function(){ let position = this.offsetTop; //当前元素距离顶部的距离 //window.scrollTo(0,position) let result = {}; result.position = position.toString() let jsonString = JSON.stringify(result); let escapedJsonString = encodeURI(jsonString); //重新编码 let scheme = &amp;#34;position://&amp;#34;; document.location.href = scheme + &amp;#34;#&amp;#34; + escapedJsonString; //向ios发送 }); } 参考资料</description>
    </item>
    
    <item>
      <title>RunLoop</title>
      <link>https://iihui.github.io/post/ios-runloop/</link>
      <pubDate>Fri, 14 Dec 2018 08:21:26 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-runloop/</guid>
      <description>概念 一般来讲，一个线程一次只能执行一个任务，执行完成后，线程就会退出。若我们需要一个机制，让线程能随时处理事件但并不退出，通常的代码逻辑是下面这样的： function loop() { initialize(); do { var message = get_next_message(); process_message(message); } while (message != quit); } 这种模型被称为Event Loop,实现这种模型的关键点在</description>
    </item>
    
    <item>
      <title>权限检查</title>
      <link>https://iihui.github.io/post/ios-authority/</link>
      <pubDate>Thu, 13 Dec 2018 20:25:33 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-authority/</guid>
      <description>相机权限检查 相机和音频的权限分为4种，分别是.denied,restricted,.authorized,.notDetermined,.authorized四种: .denied 未授权，用户曾经选择过拒绝授权。 .authorized 已经授权。 .restricted 未授权，例如家长控制。 .notDetermined 没有</description>
    </item>
    
    <item>
      <title>CABasicAnimation</title>
      <link>https://iihui.github.io/post/ios-animation/</link>
      <pubDate>Thu, 13 Dec 2018 10:50:31 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-animation/</guid>
      <description>关键帧动画 所谓关键帧动画，就是将Layer的属性作为KeyPath来注册，只要指定动画的起始帧和结束帧，然后自动计算和实现中间的过度的一种动画方式。 func recordingButtonAnimation(){ let animation = CABasicAnimation(keyPath: &amp;#34;opacity&amp;#34;) animation.fromValue = 1.0 animation.toValue = 0.3 animation.fillMode = kCAFillModeForwards animation.isRemovedOnCompletion = false animation.duration = self.animationDuration self.recordButton.layer.add(animation, forKey: nil) } //添加定时器 if recordingAnimationTimer == nil{ recordingAnimationTimer = Timer.scheduledTimer(timeInterval: self.animationDuration, target: self, selector: #selector(recordingButtonAnimation), userInfo:</description>
    </item>
    
    <item>
      <title>透明度渐变动画</title>
      <link>https://iihui.github.io/post/ios-opicity-animation/</link>
      <pubDate>Thu, 13 Dec 2018 10:50:31 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-opicity-animation/</guid>
      <description>CABasicAnimation关键帧动画 所谓关键帧动画，就是将Layer的属性作为KeyPath来注册，只要指定动画的起始帧和结束帧，然后自动计算和实现中间的过度的一种动画方式。 func recordingButtonAnimation(){ let animation = CABasicAnimation(keyPath: &amp;#34;opacity&amp;#34;) animation.fromValue = 1.0 animation.toValue = 0.3 animation.fillMode = kCAFillModeForwards animation.isRemovedOnCompletion = false animation.duration = self.animationDuration self.recordButton.layer.add(animation, forKey: nil) } //添加</description>
    </item>
    
    <item>
      <title>Gif的播放与暂停</title>
      <link>https://iihui.github.io/post/ios-gif/</link>
      <pubDate>Thu, 13 Dec 2018 08:25:45 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-gif/</guid>
      <description>Gif的播放有两种方式，一种是通过UIWebview；一种是通过UIImageView的方式。使用UIWebview的缺点是不可以暂停。 UIWebView import UIKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() guard let path = Bundle.main.path(forResource: &amp;#34;demo&amp;#34;, ofType:&amp;#34;gif&amp;#34;) else{ return } let url = URL(fileURLWithPath: path) do{ let gifData = try Data(contentsOf: url) let webView = UIWebView() webView.frame = CGRect(x: 0, y: 100, width: self.view.frame.width, height: 600) webView.scalesPageToFit = true webView.load(gifData,</description>
    </item>
    
    <item>
      <title>iOS视频开发入门</title>
      <link>https://iihui.github.io/post/ios-video/</link>
      <pubDate>Wed, 12 Dec 2018 10:55:40 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-video/</guid>
      <description>视频实质 纯粹的视频（不包括音频）实质上就是一组帧图片，经过视频编码成为视频(video)文件再把音频（audio）文件以及字幕文件组装在一起成为视频（movie）文件。 1秒内出现的图片数就是帧率，图片间隔越小画面就越流畅，所以帧率越高效果就</description>
    </item>
    
    <item>
      <title>HTML入门</title>
      <link>https://iihui.github.io/post/htm-primer/</link>
      <pubDate>Thu, 06 Dec 2018 19:22:27 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/htm-primer/</guid>
      <description>简介 HTML指的是超文本标记语言 (Hyper Text Markup Language)，它不是一种编程语言，而是一种标志语言，标记语言是一套标记标签，使用标记标签来描述网页。 .htm or .html 当保存HTML文件时，可以使用.htm,也可以使用.html文件后缀。使用.htm,这只是</description>
    </item>
    
    <item>
      <title>CSS 入门</title>
      <link>https://iihui.github.io/post/css-primer/</link>
      <pubDate>Thu, 06 Dec 2018 10:43:48 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/css-primer/</guid>
      <description>关注点分离和混合 关注点分离 关注点分离的意思是：各种技术只负责自己的领域，不要混合在一起，形成耦合。对于网页开发来说，主要是三种技术分离。 HTML:负责网页的结构，称为语义层。 CSS:负责网页的样式，称为视觉层。 JavaScript:负责网页</description>
    </item>
    
    <item>
      <title>XCode快捷键</title>
      <link>https://iihui.github.io/post/xcode-quick/</link>
      <pubDate>Tue, 27 Nov 2018 15:20:06 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/xcode-quick/</guid>
      <description>MAC键盘图标 ⌘——Command () ⌃ ——Control ⌥——Option (alt) ⇧——Shift ⇪——Caps Lock 快捷键 Command+R 运行 Command+B 编译 Command+. 停止 Command + Shift + K 清除工程 Command + K 清除控制台信息 Command + N 新建文件 Command + Shift + N 创建新工程 导航栏 Command+0~9 工程导航 Command + 0 快速打开实</description>
    </item>
    
    <item>
      <title>OC 入门</title>
      <link>https://iihui.github.io/post/oc-tour/</link>
      <pubDate>Wed, 19 Sep 2018 14:29:51 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/oc-tour/</guid>
      <description>Objective-C简称OC， 是C语言的严格超集——任何C语言程序不经过修改都可以直接通过OC的编译器，在OC中使用C语言代码也是完全合法的。OC被描述为覆盖在C语言上的一层，因为OC的原意就是在C语言的主体上加入面向对象的特性。 文件扩展</description>
    </item>
    
    <item>
      <title>swift中的方法</title>
      <link>https://iihui.github.io/post/swift-method/</link>
      <pubDate>Fri, 14 Sep 2018 09:31:40 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/swift-method/</guid>
      <description>在Swift中方法是关联了特定类型的函数。类，结构体，枚举类型都能定义实例方法，方法封装了给定类型特定的任务和功能。 实例方法 实例方法是属于特定实例（类实例、结构体实例或者枚举实例）的函数。实例方法只能在类型的具体实例里被调用，不能独立于实例</description>
    </item>
    
    <item>
      <title>JavaScript 数据类型</title>
      <link>https://iihui.github.io/post/js-data-struct/</link>
      <pubDate>Mon, 20 Aug 2018 21:57:31 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/js-data-struct/</guid>
      <description>JavaScript不需要进行类型声明，因此它是一种弱类型的语言，这意味着可以在任何阶段改变变量的数据类型。 字符串 字符串是由零个或者多个字符组成，必须包含在引号中，单引号和双引号都可以。 数值 如果想给一个变量赋一个数值，不必限定它必须是一个整</description>
    </item>
    
    <item>
      <title>泼辣修图中的人像工具</title>
      <link>https://iihui.github.io/post/pixel-portrait/</link>
      <pubDate>Wed, 27 Jun 2018 08:48:35 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/pixel-portrait/</guid>
      <description>在泼辣修图中有22个强大且易用的人像调整工具，涵盖了面部结构、五官大小、肤色亮度等等的调整。当图片中出现一张脸时，泼辣修图会智能的识别脸部并区分其五官，选中相应的区域然后调整对应的参数即可。 自动调整 点击自动增强，程序可以自动优化五官、结构和</description>
    </item>
    
    <item>
      <title>泼辣修图后期术语3</title>
      <link>https://iihui.github.io/post/pixel-term3/</link>
      <pubDate>Sat, 02 Jun 2018 09:17:38 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/pixel-term3/</guid>
      <description>质感 质感：质感是指物体的材质与质量所带给人的感觉。在泼辣修图中，质感选项下的调整包括清晰度、锐化、降噪色彩、降噪明度。 清晰度 清晰度用来调整画面的清晰程度。提高清晰度数值可以让画面更加清晰，可以用来修复轻微失焦的画面。降低清晰度数值可以画面更</description>
    </item>
    
    <item>
      <title>泼辣修图后期术语2</title>
      <link>https://iihui.github.io/post/pixel-term2/</link>
      <pubDate>Fri, 01 Jun 2018 20:53:31 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/pixel-term2/</guid>
      <description>曝光 曝光：用于调整画面的明亮程度。提高曝光值会让画面变得更加明亮，整体显得干净而又轻盈；降低曝光值会让画面变得更加昏暗，整体显得沉重而又严肃。 高光、白色色阶、黑色色阶、阴影 可以按照曝光去划分照片的区域，例如把照片划分为最亮的区域、较亮的区域</description>
    </item>
    
    <item>
      <title>泼辣修图后期术语1</title>
      <link>https://iihui.github.io/post/pixel-term1/</link>
      <pubDate>Fri, 01 Jun 2018 17:17:42 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/pixel-term1/</guid>
      <description>对比度 维基百科对比度的解释为：画面黑与白的比值，即从黑到白的渐变层次。比值越大，从黑到白的渐变层次越多，从而色彩表现越丰富。对比度对于视觉的影响非常关键，一般说来对比度越大，图像越清晰越醒目，色彩也越鲜明亮丽；对比度小，则让整个画面灰蒙蒙的</description>
    </item>
    
    <item>
      <title>使用pixelmator pro修改证件照背景颜色</title>
      <link>https://iihui.github.io/post/pixel-background/</link>
      <pubDate>Fri, 01 Jun 2018 14:16:20 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/pixel-background/</guid>
      <description>现有一张白底的证件照需要修改为蓝底的。使用pixelmator pro这款软件，自己摸索出了2种方法来实现这个需求。 第一种方法 第一种方法的思路，首先将头像抠出来，然后新建一个同样大小的文件，再将抠出来图层粘贴到新建的图层，最后改变背景的颜色。</description>
    </item>
    
    <item>
      <title>Go 实现各种内排序算法</title>
      <link>https://iihui.github.io/post/go-sort/</link>
      <pubDate>Mon, 28 May 2018 12:13:06 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-sort/</guid>
      <description>内排序是指在排序过程中，数据都能够放在内存中处理，排序时不涉及数据的内、外交换。 插入类排序 直接插入排序 func InsertSort(data []int) { var i, j, cur int length := len(data) //获得切片对应数组的长度 for i = 1; i &amp;lt; length; i++ { cur = data[i] for j = i - 1; j &amp;gt;= 0; j-- { if data[j] &amp;gt; cur { data[j+1] = data[j] } else { break } } data[j+1] = cur } } 二分</description>
    </item>
    
    <item>
      <title>VirtualBox 虚拟机扩容</title>
      <link>https://iihui.github.io/post/tool-vb-resize/</link>
      <pubDate>Mon, 21 May 2018 07:39:06 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/tool-vb-resize/</guid>
      <description>今天在使用VirtualBox安装win10虚拟机的时候，开始创建的虚拟磁盘空间有点小，安装了许多软件之后磁盘不够用了，需要进行扩容，接下来分三步来解决该问题。 加入到环境变量 首先将VirtualBox的安装目录添加到环境变量path中。首先</description>
    </item>
    
    <item>
      <title>R 绘图中使用中文</title>
      <link>https://iihui.github.io/post/r-chinese/</link>
      <pubDate>Wed, 16 May 2018 15:46:49 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/r-chinese/</guid>
      <description>默认情况下R中绘图不支持中文 绘制图2-1 首先，绘制图2-1(a),代码如下： fiber.absorp=read.csv(&amp;#39;~/downloads/data/paper/absorp.csv&amp;#39;,sep=&amp;#39;,&amp;#39;,header = T) absorp.wool=spline(fiber.absorp$RH,fiber.absorp$wool,n=1000) absorp.PP=spline(fiber.absorp$RH,fiber.absorp$PP,n=1000) absorp.cotton=spline(fiber.absorp$RH,fiber.absorp$cotton,n=1000) plot(absorp.wool,col=&amp;#34;DarkTurquoise&amp;#34;,xlab=&amp;#34;Relative Humidity(%)&amp;#34;,ylab=&amp;#34;hygroscopicity(%)&amp;#34;,main=&amp;#34;Hygrosopic isotherms of various fibers&amp;#34;,type=&amp;#39;l&amp;#39;,lwd=2) lines(absorp.PP,type=&amp;#39;l&amp;#39;,lwd=2,col=&amp;#34;DeepPink&amp;#34;) lines(absorp.cotton,col=&amp;#34;RosyBrown&amp;#34;,type=&amp;#34;l&amp;#34;,lwd=2) text.legend=c(&amp;#34;wool&amp;#34;,&amp;#34;cotton&amp;#34;,&amp;#34;PP&amp;#34;) legend(&amp;#34;topleft&amp;#34;,legend=text.legend,col=c(&amp;#34;Darkturquoise&amp;#34;,&amp;#34;RosyBrown&amp;#34;,&amp;#34;DeepPink&amp;#34;),text.col=c(&amp;#34;Darkturquoise&amp;#34;,&amp;#34;RosyBrown&amp;#34;,&amp;#34;DeepPink&amp;#34;),lty=c(1,1,1)) RH,PP,cotton,wool 0,0,0,0 20,0.8,2.5,7.5 40,0.9,4.9,12.3 60,0.92,7.1,14.6 80,0.96,9.2,16.8 100,1.02,12.8,27.2 然后，绘制图2-1(b),代码如下： fiber.temp=read.csv(&amp;#39;~/downloads/data/paper/temp.csv&amp;#39;,sep=&amp;#39;,&amp;#39;,header = T) temp.wool=spline(fiber.temp$time,fiber.temp$wool,n=1000) temp.PP=spline(fiber.temp$time,fiber.temp$PP,n=1000) temp.cotton=spline(fiber.temp$time,fiber.temp$cotton,n=1000) plot(temp.wool,col=&amp;#34;DarkTurquoise&amp;#34;,xlab=&amp;#34;Time(min)&amp;#34;,ylab=&amp;#34;Temperature(deg)&amp;#34;,main=&amp;#34;Temperature of various fibers&amp;#34;,type=&amp;#39;l&amp;#39;,lwd=2) lines(temp.PP,type=&amp;#39;l&amp;#39;,lwd=2,col=&amp;#34;DeepPink&amp;#34;) lines(temp.cotton,type=&amp;#39;l&amp;#39;,lwd=2,col=&amp;#34;RosyBrown&amp;#34;) text.legend=c(&amp;#34;wool&amp;#34;,&amp;#34;cotton&amp;#34;,&amp;#34;PP&amp;#34;) legend(&amp;#34;topright&amp;#34;,legend=text.legend,col=c(&amp;#34;Darkturquoise&amp;#34;,&amp;#34;RosyBrown&amp;#34;,&amp;#34;DeepPink&amp;#34;),text.col=c(&amp;#34;Darkturquoise&amp;#34;,&amp;#34;RosyBrown&amp;#34;,&amp;#34;DeepPink&amp;#34;),lty=c(1,1,1)) time,PP,cotton,wool 0,20.0,20.0,20.0 1,20.2,27.0,28.2 2,20.14,26.55,27.87 3,20.12,26.1,27.54 4,20.1,25.65,27.21 5,20.1,25.2,26.76 6,20.1,24.75,26.43 7,20.1,24.3,26.1 8,20.1,23.85,25.77 9,20.1,23.4,25.44 10,20.1,23,25.2 20,20.1,21.6,23.8 30,20.1,21.4,22.9 40,20.1,21.2,22.2 50,20.1,21.1,21.7 60,20.1,21.0,21.5 70,20.1,20.9,21.4 80,20.1,20.86,21.3 90,20.1,20.82,21.2 绘制图3-1 代</description>
    </item>
    
    <item>
      <title>C&#43;&#43; 常见知识点</title>
      <link>https://iihui.github.io/post/cpp-base/</link>
      <pubDate>Sat, 05 May 2018 17:24:44 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/cpp-base/</guid>
      <description>static的作用 对普通函数和全局变量而言static具有隐藏作用：将其修饰的全局变量和函数的作用域限定在本文件中。不加static修饰的函数和全局变量具有全局可见性。 普通局部变量而言 未初始化的static普通局部变量，编译器会将其初始化为</description>
    </item>
    
    <item>
      <title>线性表</title>
      <link>https://iihui.github.io/post/arith-linear-list/</link>
      <pubDate>Wed, 25 Apr 2018 20:52:42 +0800</pubDate>
      
      <guid>https://iihui.github.io/post/arith-linear-list/</guid>
      <description>线性表是由 $n$个具有相同特性的元素$(n \ge 0)$ 组成的一个有限序列，是一种逻辑结构。它的特征在于：①表中所有数据元素类型相同。②表由有限个数据元素构成。③表中数据元素是位置相关的（这一点表明线性表不同于集合)，并且每个元素都有一个对应的序号，</description>
    </item>
    
    <item>
      <title>Go 标签</title>
      <link>https://iihui.github.io/post/go-label/</link>
      <pubDate>Mon, 06 Nov 2017 16:11:37 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-label/</guid>
      <description>在for,switch或者select中都可以配合标签形式的标识符使用——某一行第一个以冒号结尾的单词（因为gofmt会自动将后续代码移动至下一行）。 一个实例 package main import &amp;#34;fmt&amp;#34; func main() { LABEL1: for i := 0; i &amp;lt;= 5; i++ { for j := 0; j &amp;lt;= 5; j++ { if j == 4 { continue LABEL1 } fmt.Printf(&amp;#34;i is: %d, and j is: %d\n&amp;#34;,</description>
    </item>
    
    <item>
      <title>Go 中if语句</title>
      <link>https://iihui.github.io/post/go-if/</link>
      <pubDate>Thu, 02 Nov 2017 19:53:47 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-if/</guid>
      <description>if是用于测试某个条件（布尔型，又被称为逻辑型）的语句，如果该条件成立，则会执行if后由大括号括起来的代码块，否则就忽略该代码块继续执行后续的代码。Go中if语句总共有三种形式，分别是： 不带else的if； 带一个else的if语句； 带els</description>
    </item>
    
    <item>
      <title>位运算算法</title>
      <link>https://iihui.github.io/post/arith-bits/</link>
      <pubDate>Sat, 28 Oct 2017 11:12:12 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/arith-bits/</guid>
      <description>判断是否为2的n次方 对于整数数来说，如果一个数为$x=2^n$,那么必然有一位为1，右边其它位全为0。那么$(x-1)$在其对应为1的位置上为0，对应位右边全部为1。因此，x&amp;amp;(x-1)的值则为0。 (x&amp;amp;(x-1) == 0) //要求是正整数 位运算实现加</description>
    </item>
    
    <item>
      <title>败者树</title>
      <link>https://iihui.github.io/post/arith-loser-tree/</link>
      <pubDate>Fri, 29 Sep 2017 21:09:50 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/arith-loser-tree/</guid>
      <description>胜者树和败者树都是完全二叉树，是树形选择排序的一种变型。每个叶子结点相当于一个选手，每个中间结点相当于一场比赛，每一层相当于一轮比赛。不同的是，胜者树的中间结点记录的是胜者的标号；而败者树的中间结点记录的败者的标号。胜者树与败者树都可以在$</description>
    </item>
    
    <item>
      <title>剑指offer题集1</title>
      <link>https://iihui.github.io/post/arith-sword-1/</link>
      <pubDate>Wed, 16 Aug 2017 09:46:10 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/arith-sword-1/</guid>
      <description>二维数组中查找 在一个二维数组中，每一行都按从左到右递增的顺序排序，每一列都按从上到下递增的顺序排列，试从该二维数组查找给定的元素。 首先应该从右上角的元素(记为cur)开始比较，如果当前要查找的元素key的值比cur大，那么就应该往cur所在</description>
    </item>
    
    <item>
      <title>C&#43;&#43;智能指针</title>
      <link>https://iihui.github.io/post/cpp-smart-pointer/</link>
      <pubDate>Sun, 13 Aug 2017 16:01:53 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/cpp-smart-pointer/</guid>
      <description>智能指针是一个类，它对普通指针进行封装，使智能指针类对象具有普通指针类型一样的操作。具体而言，复制对象时，副本和原对象都指向同一存储区域，如果通过一个副本改变其所指的值，则通过另一对象访问的值也会改变。与普通指针所不同的是，智能指针能够对内</description>
    </item>
    
    <item>
      <title>Go 中映射(字典）</title>
      <link>https://iihui.github.io/post/go-map/</link>
      <pubDate>Sat, 05 Aug 2017 19:25:17 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-map/</guid>
      <description>映射(或称为字典)是一种数据结构，用于存储一系列无序的键值对，它是基于键来存储值。映射的键可以是任何值，只要这个值可以使用==运算符做比较即可。切片、函数以及包含切片的结构类型这些类型由于具有引用语义， 不能作为映射的键。 创建和初始化 使用ma</description>
    </item>
    
    <item>
      <title>Go 切片</title>
      <link>https://iihui.github.io/post/go-slice/</link>
      <pubDate>Fri, 04 Aug 2017 15:37:58 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-slice/</guid>
      <description>定义 切片是围绕动态数组的概念来构建的，但是本身并非动态数组或数组指针，它通过内部指针引用底层数组，设定相关属性，将数据读写操作限定到指定区域。切片这个名字来自于——创建一个新的切片就是把底层数组切出一部分。 type slice struct{ array unsafe.Pointer // slice中指向底层数</description>
    </item>
    
    <item>
      <title>Go 数组</title>
      <link>https://iihui.github.io/post/go-array/</link>
      <pubDate>Thu, 03 Aug 2017 15:11:37 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-array/</guid>
      <description>定义 在Go语言里，数组是一个长度固定的数据类型，用于连续存储多个具有相同的类型的元素。数组存储的类型可以是内置类型，如整型或者字符串，也可以是某种结构类型。 ![c600](http://oqe76o492.bkt.clouddn.com/屏</description>
    </item>
    
    <item>
      <title>Go 未命名类型</title>
      <link>https://iihui.github.io/post/go-undef-type/</link>
      <pubDate>Thu, 03 Aug 2017 11:04:39 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-undef-type/</guid>
      <description>未命名类型 在Go中数组、切片、字典、通道类型与具体元素类型或长度属性相关，故被称为未命名类型。具有相同声明的未命名类型被称为同一类型，在 Go 中未命名类型共有8类。 具有相同基础类型的指针 具有相同元素类型和长度的数组array 具有相同元素类型的切</description>
    </item>
    
    <item>
      <title>Go 接口</title>
      <link>https://iihui.github.io/post/go-interface/</link>
      <pubDate>Wed, 02 Aug 2017 09:13:45 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-interface/</guid>
      <description>接口定义 接口代表一种调用契约，是多个方法声明的集合。在某些动态语言中接口(interface)也被称为协议(protocol)。准备交互的双方，共同遵守事先的约定规则，使得在无须知道对方身份的情况下进行协作。接口关心的是做什么，而不关心怎么</description>
    </item>
    
    <item>
      <title>Go 定义类型</title>
      <link>https://iihui.github.io/post/go-struct/</link>
      <pubDate>Tue, 01 Aug 2017 09:43:30 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-struct/</guid>
      <description>值的类型给编译器提供两部分信息：①需要分配多少内存给这个值；②这段内存表示什么。Go语言允许用户定义类型，当用户声明一个新类型时，这个声明就给编译器提供一个框架，告知必要的内存大小和表示信息。 结构体 Go语言中声明用户定义的类型有两种方法，①</description>
    </item>
    
    <item>
      <title>Go 延迟调用</title>
      <link>https://iihui.github.io/post/go-defer/</link>
      <pubDate>Mon, 31 Jul 2017 08:55:09 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-defer/</guid>
      <description>关键字defer允许我们推迟到函数返回前一刻(或任意位置执行return语句之后)才执行某个语句或函数。 为什么要在返回之后才执行这些语句？因为return语句同样可以包含一些操作，而不是单纯地返回某个值，实际上此时return语句要做三件事</description>
    </item>
    
    <item>
      <title>Go 方法</title>
      <link>https://iihui.github.io/post/go-method/</link>
      <pubDate>Sun, 30 Jul 2017 21:06:07 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-method/</guid>
      <description>方法 在Go中结构体就像是类的一种简化形式，方法就像类中的方法。方法是与对象实例绑定的特殊函数，方法和函数定义语法区别在于:方法有前置实例接收参数receiver，编译器以此确定方法所属类型。 接收者类型几乎可以是任何类型，不仅仅是结构体类型，</description>
    </item>
    
    <item>
      <title>Go 包</title>
      <link>https://iihui.github.io/post/go-package/</link>
      <pubDate>Sat, 29 Jul 2017 10:02:56 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-package/</guid>
      <description>包是结构化的一种方式,所有Go语言的程序都会组织成若干组文件，每组文件被称为一个包。每个文件都属于且仅属于一个包，一个包中可以包含许多以.go为扩展名的源文件。 包中源文件 源文件都使用UTF-8编码，每个源文件都属于包的一部分，在文件头部用p</description>
    </item>
    
    <item>
      <title>Go 数据</title>
      <link>https://iihui.github.io/post/go-data/</link>
      <pubDate>Fri, 28 Jul 2017 10:32:19 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-data/</guid>
      <description>数据类型 Go 中数据分为基本类型，数组，引用，字典（映射)，通道，函数，结构体，接口等等。 切片slice可实现类似动态数组的功能y := make([]int, 0, 5); append(y,7)。 将字典map类型内置，可以直接从运行层面获得性能优化。 所谓ok-idiom模式，就</description>
    </item>
    
    <item>
      <title>Go 函数</title>
      <link>https://iihui.github.io/post/go-func/</link>
      <pubDate>Thu, 27 Jul 2017 21:58:12 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-func/</guid>
      <description>Go中有3种类型的函数，第一种是普通带名字的函数，第二种是匿名函数(或者被称为lambda函数)，第三种是方法（含有接收者的特殊函数）。 特点 在Go中关键字func用于定义函数，相比于其他语言，Go中函数有以下的特点： 函数是一等公民，即可作为</description>
    </item>
    
    <item>
      <title>Go 表达式</title>
      <link>https://iihui.github.io/post/go-expression/</link>
      <pubDate>Wed, 26 Jul 2017 20:14:46 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-expression/</guid>
      <description>运算符 在Go中，一元运算符优先级最高，二元则分为5个级别，二元运算符遵循相同优先级从左到右依次计算，二元运算符从高到低的5个等级为： * / % &amp;lt;&amp;lt; &amp;gt;&amp;gt; &amp;amp; &amp;amp;^ + - | ^ == != &amp;lt; &amp;lt;= &amp;gt; &amp;gt;= &amp;amp;&amp;amp; || 二元运算符中除了移位操作外，操作数类型必须相同。如果其中一个是无显式类</description>
    </item>
    
    <item>
      <title>Go 常量</title>
      <link>https://iihui.github.io/post/go-const/</link>
      <pubDate>Tue, 25 Jul 2017 09:45:49 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-const/</guid>
      <description>常量是一种表达式，其可以保证在编译阶段计算出表达式的值，并不需要等到运行时，从而使编译器得以知晓其值。所有常量本质上都属于基本类型：布尔型，字符串或数字。 特别说明 Go中常量可以是任意基本类型，也包括具名的基本类型(例如time.Durati</description>
    </item>
    
    <item>
      <title>Go 基本类型</title>
      <link>https://iihui.github.io/post/go-type/</link>
      <pubDate>Mon, 24 Jul 2017 10:34:44 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/go-type/</guid>
      <description>Go语言中定义了清晰完备的预定义基本类型（共21类），使得开发跨平台应用时无须过多考虑符号和长度差异，具体如下表： ![c600](http://oqe76o492.bkt.clouddn.com/屏幕快照 2017-12-21 下午2.36.532.jpg) 整型</description>
    </item>
    
    <item>
      <title>memcpy 的实现</title>
      <link>https://iihui.github.io/post/cpp-memcpy/</link>
      <pubDate>Thu, 01 Jun 2017 11:44:24 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/cpp-memcpy/</guid>
      <description>地址重叠 void *memcpy(void *dst, const void *src, size_t n); //If copying takes place between objects that overlap, the behavior is undefined. 注意注释，对于地址重叠的情况，该函数的行为是未定义的。事实上所说的陷阱也在于此，自己动手实现memcpy时就需要考虑地址重叠的情况。 另外，标准库也提供了地址重叠时的内存拷贝函数：memmove</description>
    </item>
    
    <item>
      <title>基本排序算法</title>
      <link>https://iihui.github.io/post/arith-sort/</link>
      <pubDate>Tue, 23 May 2017 17:54:57 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/arith-sort/</guid>
      <description>基本概念 排序算法的稳定性：如果待排序的数据中，存在多个关键字相同的元素，经过排序后这些具有相同关键字的元素之间的相对次序保持不变，则称这种排序算法是稳定的，反之则为不稳定。 内排序：排序过程中，整个表都是放在内存中处理，排序时不涉及数据的内、</description>
    </item>
    
    <item>
      <title>流水线自动发布组件</title>
      <link>https://iihui.github.io/post/ios-release/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://iihui.github.io/post/ios-release/</guid>
      <description></description>
    </item>
    
  </channel>
</rss>