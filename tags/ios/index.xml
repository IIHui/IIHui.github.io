<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>iOS on Keep It Simple</title>
    <link>https://IIHui.github.io/tags/ios/</link>
    <description>Recent content in iOS on Keep It Simple</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Tue, 04 Feb 2020 13:15:10 +0000</lastBuildDate>
    
	<atom:link href="https://IIHui.github.io/tags/ios/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Objective-C Runtime</title>
      <link>https://IIHui.github.io/post/oc-runtime/</link>
      <pubDate>Tue, 04 Feb 2020 13:15:10 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/oc-runtime/</guid>
      <description>Runtime中的概念解析 所有的Objective-C方法调用[receiver selector]在编译时都会转化为对应的C函数objc_msgSend(receiver，selector)的调用。Object对象 在objc/runtime.h中，Object被定义为指向objc_object结构体的指针，objc_object结构体的定义如下： //runtime对objc_object结构体的定</description>
    </item>
    
    <item>
      <title>GCD</title>
      <link>https://IIHui.github.io/post/ios-dispatchqueue/</link>
      <pubDate>Thu, 07 Mar 2019 09:28:12 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-dispatchqueue/</guid>
      <description>参考资料 参考资料1 参考资料2</description>
    </item>
    
    <item>
      <title>第三方库放到Cocoapods中</title>
      <link>https://IIHui.github.io/post/ios-cocoapods-storage/</link>
      <pubDate>Fri, 01 Mar 2019 09:34:41 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-cocoapods-storage/</guid>
      <description>因项目需要引用百度语音合成SDK，但这个第三方库的.a文件过于庞大，按规定不能直接放到项目中，需要放到项目依赖的Cocoapods仓库中。因为已有相应的模板，所以只要按照要求修改对应的文件，然后执行相应的命令即可，现将这一过程总结为5步。 第一步 第一步为修改.podspec文件，为了修改podspec文件，首先必须创建第三方库目录。下图为第三方库存放的目录结构，如需新建一个第三方库目录，则选中任意一</description>
    </item>
    
    <item>
      <title>引入百度语音合成</title>
      <link>https://IIHui.github.io/post/ios-baidusynthesizer/</link>
      <pubDate>Thu, 28 Feb 2019 11:08:15 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-baidusynthesizer/</guid>
      <description>因项目中需要用到百度语音合成SDK，因此自己先建了一个工程作为引入测试，总结下来为准备&amp;ndash;&amp;gt;导入&amp;ndash;&amp;gt;创建应用&amp;ndash;&amp;gt;测试。 准备工作 首先从百度官网下载百度语音合成的SDK,如下图所示首先在左边选择语音合成，然后在右边选择iOS版的离在线融合SDDK: 导入 有两部分需要导入，第一部分是导入百度语音合成所需的文件，第二部分是导入百度语音合成依赖的框架，下面分</description>
    </item>
    
    <item>
      <title>H5视频播放</title>
      <link>https://IIHui.github.io/post/ios-html-player/</link>
      <pubDate>Mon, 25 Feb 2019 08:52:09 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-html-player/</guid>
      <description>最近APP出现了在iPhone上拍的视频，同步到Android手机后播放不了的问题，第一感觉应该是iPhone上录制视频所使用的编码不兼容Android。经过沟通，了解到播放视频是用H5嵌入的，因为手边没有视频播放源码和可测试的Android设备，为了验证我的猜测，尝试着先改变iPhone录制视频时的编码方式，然后写一段播放视频的H5，用Chrome浏览器进行测试能够正常播放。 确认编码 首先找到视频</description>
    </item>
    
    <item>
      <title>半透明的悬浮提示窗</title>
      <link>https://IIHui.github.io/post/ios-alert-window/</link>
      <pubDate>Sun, 24 Feb 2019 19:50:43 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-alert-window/</guid>
      <description>因项目中需要一个悬浮提示窗，从网上找到一篇以OC为示例的文章，因为公司项目是Swift写的，因此需要将OC转为Swift。 OC代码 .h文件 //CustomAlertWindow.h #import &amp;lt;UIKit/UIKit.h&amp;gt;typedef NS_ENUM(NSInteger, AlertWindowPositionOption) { AlertWindowPositionTopMiddle = 0, AlertWindowPositionCenter, AlertWindowPositionBottomMiddle }; @interface CustomAlertWindow : UIWindow + (instancetype)aletWindowWithPositionOption:(AlertWindowPositionOption)positionType andInfoText:(NSString *)text; //显示 - (void)show; // 消失 - (void)dismiss; @end .m文件 //CustomAlertWindow.m #import &amp;#34;CustomAlertWindow.h&amp;#34; #define LABEL_MARGIN 10 //Label的外边距 #define CENTER_Y_TO_EDGE 80 //悬浮窗中心点距边缘的纵坐标值 @implementation CustomAlertWindow + (instancetype)aletWindowWithPositionOption:(AlertWindowPositionOption)positionType andInfoText:(NSString *)text { return [[CustomAlertWindow alloc] initWithPositionOption:positionType andInfoText:text]; } - (instancetype)initWithPositionOption:(AlertWindowPositionOption)positionType andInfoText:(NSString *)text { self = [super init]; if (self) { UILabel *infoLabel = [[UILabel alloc] initWithFrame:CGRectMake(0, 0, 40, 15)]; infoLabel.text = text; infoLabel.textAlignment = NSTextAlignmentCenter; infoLabel.font = [UIFont systemFontOfSize:13]; infoLabel.textColor = [UIColor whiteColor]; //label尺寸适应</description>
    </item>
    
    <item>
      <title>UIWebview 加载含特殊字符网页</title>
      <link>https://IIHui.github.io/post/ios-webview-html/</link>
      <pubDate>Sun, 24 Feb 2019 18:57:05 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-webview-html/</guid>
      <description>UIWebview中加载的html文件中如果含有\n,&#39;等特殊字符时，显示为一片空白，通过查阅资料得知需要将这些特殊字符进行预处理。 预处理 class HTMLUtils{ static func escapsedHTML(html: String)-&amp;gt;String{ var result = html if !result.isEmpty{ result = result.replacingOccurrences(of: &amp;#34;\\&amp;#34;, with: &amp;#34;\\\\&amp;#34;) result = result.replacingOccurrences(of: &amp;#34;\&amp;#34;&amp;#34;, with: &amp;#34;\\\&amp;#34;&amp;#34;) result = result.replacingOccurrences(of: &amp;#34;&amp;#39;&amp;#34;, with: &amp;#34;\\&amp;#39;&amp;#34;) result = result.replacingOccurrences(of: &amp;#34;\r&amp;#34;, with: &amp;#34;\\r&amp;#34;) result = result.replacingOccurrences(of: &amp;#34;\n&amp;#34;, with: &amp;#34;\\n&amp;#34;) } return result } }</description>
    </item>
    
    <item>
      <title>HTTP 网络请求</title>
      <link>https://IIHui.github.io/post/ios-network-tcp/</link>
      <pubDate>Fri, 18 Jan 2019 09:37:41 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-network-tcp/</guid>
      <description>参考资料 参考资料</description>
    </item>
    
    <item>
      <title>创建新的Target</title>
      <link>https://IIHui.github.io/post/ios-new-target/</link>
      <pubDate>Thu, 10 Jan 2019 11:18:46 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-new-target/</guid>
      <description>因项目需要新建一条众测流水线，因此首先需要基于DEV环境新建一个Target，然后将新建的Target对配置到新建的流水线上。 Duplicate 新Target的创建一般以已有的Target为模板，如下图所示，首先选中模板Target，然后右键点击选中Duplicate就能创建新的Target: 修改Target名字 首先点击新的Target然后按回车键修改名字，此时修改的名字 修改plist 一旦点击Duplicate就</description>
    </item>
    
    <item>
      <title>Swift访问权限</title>
      <link>https://IIHui.github.io/post/ios-access-control/</link>
      <pubDate>Wed, 09 Jan 2019 09:18:25 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-access-control/</guid>
      <description>访问权限用于限制部分代码被其它源文件或者模块访问，目的是隐藏某些代码的实现细节。在Swift中可以设置类型(类、结构和枚举)的访问权限，也可以设置属性和方法的访问权限。Swift提供了5个访问级别，这些访问级别以模块和源文件为区分粒度。 模块和源文件 模块 模块是指独立的代码单元，在iOS中框架或应用程序就是一个独立模块。在一个模块中可以用import关键字导入另一个模块。 源文件 源文件即Swift中的源</description>
    </item>
    
    <item>
      <title>单例模式</title>
      <link>https://IIHui.github.io/post/ios-swift-singleton/</link>
      <pubDate>Mon, 07 Jan 2019 23:29:33 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-swift-singleton/</guid>
      <description>单例模式(Singleton Pattern)属于创建型模式，该模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有一个单例对象被创建。 第一种方式 利用Swift中全局变量的懒加载和全局变量初始化时默认使用dispatch_once以保证全局变量的构造器只会被调用一次: let sharedManager = MyManager(string: someString) //定义全局变量 class MyManager { let string: String //初始化器 init(string: String) { self.string = string } } 第二种方式 利用static和private两个关键字,sta</description>
    </item>
    
    <item>
      <title>基于PageController的图片预览</title>
      <link>https://IIHui.github.io/post/ios-image-preview/</link>
      <pubDate>Sat, 05 Jan 2019 11:49:11 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-image-preview/</guid>
      <description>参考资料 参考资料 参考资料 参考资料</description>
    </item>
    
    <item>
      <title>LLDB 调试</title>
      <link>https://IIHui.github.io/post/ios-debug/</link>
      <pubDate>Fri, 04 Jan 2019 14:15:45 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-debug/</guid>
      <description>LLDB是一个庞大的工具,内置了许多有用的命令。 命令语法结构 &amp;lt;command&amp;gt; [&amp;lt;subcommand&amp;gt; [&amp;lt;subcommand&amp;gt;...]] &amp;lt;action&amp;gt; [-options [option-value]] [argument [argument...]] 其中： command和subcommand为LLDB调试命令的名称，命令和子命令按照层级结构来排列：一个命令对象为跟随其的子命令对象创建一个上下文，子命令又为其子命令创建一个上下文，依此类推。 action 上面的这些元素之间通过空格来分割，如果某一元素自身含有空格，则可以使用双引用。而如果元素中又包含双引号，则可以使用反斜杠；或者元素</description>
    </item>
    
    <item>
      <title>多图片选择</title>
      <link>https://IIHui.github.io/post/ios-image-selector/</link>
      <pubDate>Fri, 04 Jan 2019 09:51:58 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-image-selector/</guid>
      <description>第一步 JSAPI中有个文件选择器，而文件选择器中有选择多个图片的功能。首先在WebviewController.swift中找到: case UrlSchema.fileSelectorSchema.rawValue: //文件选择器 fileSelectorService.presentFileSelector(self.webConfig, params: paramDic) 第二步 首先查看fileSelectorService的创建: fileprivate lazy var fileSelectorService: FileSelectorService = FileSelectorService(callbackDelegate: self) 而FileSelectorService继承自BaseCallbackService: class FileSelectorService: BaseCallbackService { } func presentFileSelector(_ webConfig: WebConfig, params: NSDictionary) { self.urlParams = params var webFileType:WebFileType? if let type = params[&amp;#34;type&amp;#34;] as? String ,type != &amp;#34;&amp;#34;{ switch type { case &amp;#34;video&amp;#34;: webFileType = .video break case &amp;#34;photo&amp;#34;: webFileType = .image break</description>
    </item>
    
    <item>
      <title>Swift中for-in的各种姿势</title>
      <link>https://IIHui.github.io/post/swift-for-in/</link>
      <pubDate>Fri, 04 Jan 2019 08:16:45 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/swift-for-in/</guid>
      <description>Swift中只有一种形式的for循环，即for-in。但是for-in有多种形式，包括常规用法和区间循环。 常规用法 常规用法一般用于直接访问数组中的元素，分为直接访问和按索引访问： let arr = [34,78,789,-12] for item in arr{ print(item) } 在OC中是通过索引i来访问数组中的元素，在Swift中需要借助枚举enumerate来实现 for item in arr.enumerated(){ print(item.offset,item.element) } for (i,num) in arr.enumerated(){ print(i,num) } 区间循环 在Swift中...表示闭区间，例如0...10表示0，1，2，...，10；而</description>
    </item>
    
    <item>
      <title>iOS允许HTTP请求</title>
      <link>https://IIHui.github.io/post/ios-http/</link>
      <pubDate>Sat, 29 Dec 2018 11:05:00 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-http/</guid>
      <description>在iOS 9之后，苹果默认要求App访问的url必须为https的安全链接，为了能在项目中请求Http链接，需要在项目中自动生成的Info.plist文件里，将App Transport Security Settings下的Allow Arbitrary Loads设置为YES「如果没有则先添加这两项」:</description>
    </item>
    
    <item>
      <title>AFNetworking 使用</title>
      <link>https://IIHui.github.io/post/ios-anfnetworking/</link>
      <pubDate>Fri, 28 Dec 2018 21:08:45 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-anfnetworking/</guid>
      <description>AFNetworking是为OS X和iOS设计的一套网络框架，对NSURLConnection和NSURLSession做了封装，提供了丰富的API以及完善的错误解决方案。 func testAF(){ let url = URL(string: &amp;#34;https://www.waitsun.com/&amp;#34;) let manager = AFHTTPSessionManager(baseURL: url) manager.responseSerializer = AFHTTPResponseSerializer() //响应数据格式二进制的 let str = &amp;#34;fastscripts.html&amp;#34; manager.get(str, parameters: nil, progress:{(progress) in print(progress) }, success: { (task,result) in print(&amp;#34;success!&amp;#34;) if let data = result{ print(data) } }, failure: { (task,error) in print(&amp;#34;failed!&amp;#34;) print(error.localizedDescription) }) AFN常见问题 错误一 AFN支持接收application/json、text/json、text/javascr</description>
    </item>
    
    <item>
      <title>笔记剥离</title>
      <link>https://IIHui.github.io/post/ios-note-peel/</link>
      <pubDate>Wed, 26 Dec 2018 11:28:32 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-note-peel/</guid>
      <description>需要处理的 集成百度语音到Framework，应当集成到基础模块 集成百度地图到Framework中，应该以接口的形式抽取出来 数据库剥离 用户数据同步 用户信息获取的剥离 已经遇到的问题 NoteLogInfo.swift 需要集成百度地图 需要配置ConfigNoteIP NoteSpeechViewController self.redCircle?.frame.y 中的y已经重命名为minY CGRect没有成员bottom NoteSpeechPresenter.swift 需要集成百度语音SDK 注意事项 不要将百度语音的SDK集成到FrameWork里，否则后续会发生冲突。 首先抽取一</description>
    </item>
    
    <item>
      <title>Framework</title>
      <link>https://IIHui.github.io/post/ios-framework/</link>
      <pubDate>Tue, 25 Dec 2018 11:45:01 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-framework/</guid>
      <description>链接库 库是一种共享程序代码的方式，分为静态库和动态库。静态库链接时被完整地拷贝到可执行文件，多次使用时就会有多个副本。 而动态库在链接时不复制，程序运行时由系统动态加载到内存，供程序调用。动态库只加载一次到内存，然后供多个程序共用，以节省内存。 静态库的形式 在iOS中静态库分为.a和.framework。.a是一个纯二进制文件，.framework中除了二进制文件之外，还有资源文件。.a文件不能直接使</description>
    </item>
    
    <item>
      <title>桥接文件</title>
      <link>https://IIHui.github.io/post/ios-bridge/</link>
      <pubDate>Mon, 24 Dec 2018 23:41:52 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-bridge/</guid>
      <description>因为历史原因，在使用Swift编程时，常常需要用到OC类中的方法，此时就需要使用桥接文件来引入OC中的头文件，以告诉Swift。 手动创建桥接文件 第一步 首先使用快捷键Command+N来新建一个文件： 第二步 选择Header File: 第三步 给Header File命名： 第四步 点击工程配置，添加关联： 第五步 设置桥接文件的路径： 第六步 将要引入的OC头文件，加入到桥接文件中，例如： //透云QR解码 #import &amp;#34;TYQRViewController.h&amp;#34; //显示GIF的</description>
    </item>
    
    <item>
      <title>WKWebView</title>
      <link>https://IIHui.github.io/post/ios-wkwebview/</link>
      <pubDate>Mon, 24 Dec 2018 08:47:19 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-wkwebview/</guid>
      <description>使用 self.webView.scrollView.addObserver(self, forKeyPath: &amp;#34;contentSize&amp;#34;, options: .new, context: nil) } override func observeValue(forKeyPath keyPath: String?, of object: Any?, change: [NSKeyValueChangeKey : Any]?, context: UnsafeMutableRawPointer?) { if let key = keyPath, key == &amp;#34;contentSize&amp;#34;{ let fittingSize = self.webView.sizeThatFits(CGSize.zero) self.webView.frame = CGRect(x: 0, y: noteTitleTextField.frame.height, width: fittingSize.width, height: fittingSize.height) } }</description>
    </item>
    
    <item>
      <title>iOS 版本检查</title>
      <link>https://IIHui.github.io/post/ios-new-version/</link>
      <pubDate>Thu, 20 Dec 2018 11:53:15 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-new-version/</guid>
      <description>首先由AboutViewController中的presenter调用其requestLastestVersion方法，而presenter是 AboutPresenter类的实例： lazy var presenter:AboutPresenter = AboutPresenter(delegate:self) presenter.requestLatestVersion() AboutPresenter类 而AboutPresenter类的实现如下所示: import Foundation protocol AboutPresenterDelegate:class { func updateUIForLatestVersion(shouldUpdate:Bool,updateMessage:String,updateUrl:String,minOSVersion: String?) } class AboutPresenter:NSObject,WelcomeHttpProtocol { lazy var webConfigs:[WebConfig?] = [self.webConfigService.versionDescriptionWebConfig,self.webConfigService.teamWebConfig,self.webConfigService.statisticWebConfig] let publishVersion:String = UpdateService().publishVersion let appDelegate = UIApplication.shared.delegate as! AppDelegate let deviceID:String = EnvironmentService.shared.deviceID fileprivate lazy var welcomHttpController: WelcomeHttpController = WelcomeHttpController(delegate: self) fileprivate lazy var webConfigService = WebConfigService() fileprivate weak var delegate:AboutPresenterDelegate? init(delegate:AboutPresenterDelegate?) { self.delegate = delegate } func requestLatestVersion() { welcomHttpController.requestLatestVersion(false) } func didReceiveLatestVersion(_ jsonData: JSON) {</description>
    </item>
    
    <item>
      <title>selection 对象</title>
      <link>https://IIHui.github.io/post/js-selection/</link>
      <pubDate>Mon, 17 Dec 2018 16:46:24 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/js-selection/</guid>
      <description>在富文本编辑器中，需要控制光标的各种状态信息，位置信息。浏览器提供了selection对象和range对象来操作光标。 selection Selection对象表示用户选择的文本范围或插入符号的当前位置。它代表页面中的文本选区，可能横跨多个元素(element)，文本选区由用户拖拽鼠标而产生。 let selection = window.getSelection(); 通常需要操作selection对象所对应的用户选择区(range)(俗称拖蓝)，获取方式为: if (selection.rangeCount &amp;gt; 0) { let range = selection.getRangeAt(0); } //</description>
    </item>
    
    <item>
      <title>KVO 简介</title>
      <link>https://IIHui.github.io/post/ios-kvo/</link>
      <pubDate>Mon, 17 Dec 2018 15:09:08 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-kvo/</guid>
      <description>在OC中KVO(key-value observing)是一种通知机制，定义了一种对象之间监控对方状态，并做出相应动作的机制。当指定的被观察者对象的属性被修改时，KVO都会自动去通知相应的观察者。 使用步骤 注册观察者，实时监听。 //第一个参数 observer：观察者 （这里观察self.myKVO对象的属性变化） //第二个参数 keyPath： 被观察的属性名称(这里观察 self.myKVO 中 num 属性值的改变) //第三个参数 o</description>
    </item>
    
    <item>
      <title>UITableView</title>
      <link>https://IIHui.github.io/post/ios-uitableview/</link>
      <pubDate>Mon, 17 Dec 2018 14:08:45 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-uitableview/</guid>
      <description>UITableView可以显示多行多组数据,创建表格视图有两种风格，一种为Plain，另一种为Grouped。 点击不变色 func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -&amp;gt; UITableViewCell { let cellId = &amp;#34;noteDetailInfoCell&amp;#34; let cell = tableView.dequeueReusableCell(withIdentifier: cellId, for: indexPath) as! NoteDetailInfoCell cell.titleLabel.text = info[indexPath.row+1].0 cell.titleLabel.textColor = &amp;#34;878997&amp;#34;.extHexStringToUIColor() cell.infoLabel.text = info[indexPath.row+1].1 cell.infoLabel.textColor = &amp;#34;4b5169&amp;#34;.extHexStringToUIColor() self.notetitleLabel.text = info[0].1 cell.selectionStyle = .none //点击某行不变色 return cell } 链接 range</description>
    </item>
    
    <item>
      <title>AVPlayer播放</title>
      <link>https://IIHui.github.io/post/ios-avplayer/</link>
      <pubDate>Fri, 14 Dec 2018 10:54:44 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-avplayer/</guid>
      <description>监听AVPlayer播放结束 NotificationCenter.default.addObserver(self, selector: #selector(handlerPlayerFinish), name: NSNotification.Name.AVPlayerItemDidPlayToEndTime, object: self.playerItem) self.playerItem = AVPlayerItem(url: outputFileURL) self.avPlayer = AVPlayer(playerItem: self.playerItem)</description>
    </item>
    
    <item>
      <title>RunLoop</title>
      <link>https://IIHui.github.io/post/ios-runloop/</link>
      <pubDate>Fri, 14 Dec 2018 08:21:26 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-runloop/</guid>
      <description>概念 一般来讲，一个线程一次只能执行一个任务，执行完成后，线程就会退出。若我们需要一个机制，让线程能随时处理事件但并不退出，通常的代码逻辑是下面这样的： function loop() { initialize(); do { var message = get_next_message(); process_message(message); } while (message != quit); } 这种模型被称为Event Loop,实现这种模型的关键点在于： 如何管理事件/消息 如何让线程在没有处理消息时休眠以避免资源占用，在有消息到来时立刻被唤醒。 因此，RunLoop实质上是一个对象，这个对象管理了其需要处理的事</description>
    </item>
    
    <item>
      <title>权限检查</title>
      <link>https://IIHui.github.io/post/ios-authority/</link>
      <pubDate>Thu, 13 Dec 2018 20:25:33 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-authority/</guid>
      <description>相机权限检查 相机和音频的权限分为4种，分别是.denied,restricted,.authorized,.notDetermined,.authorized四种: .denied 未授权，用户曾经选择过拒绝授权。 .authorized 已经授权。 .restricted 未授权，例如家长控制。 .notDetermined 没有询问过用户是否授权，所以是未确定状态。 //MARK:检查相机访问权限 func cameraPermissionCheck(){ let authStatus = AVCaptureDevice.authorizationStatus(forMediaType: AVMediaTypeVideo) switch authStatus { case .denied, .restricted: let alert = UIAlertController(title: &amp;#34;提示&amp;#34;.localized, message: CameraAccessMsg, preferredStyle: .alert) let settingAction</description>
    </item>
    
    <item>
      <title>透明度渐变动画</title>
      <link>https://IIHui.github.io/post/ios-animation/</link>
      <pubDate>Thu, 13 Dec 2018 10:50:31 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-animation/</guid>
      <description>CABasicAnimation关键帧动画 所谓关键帧动画，就是将Layer的属性作为KeyPath来注册，只要指定动画的起始帧和结束帧，然后自动计算和实现中间的过度的一种动画方式。 func recordingButtonAnimation(){ let animation = CABasicAnimation(keyPath: &amp;#34;opacity&amp;#34;) animation.fromValue = 1.0 animation.toValue = 0.3 animation.fillMode = kCAFillModeForwards animation.isRemovedOnCompletion = false animation.duration = self.animationDuration self.recordButton.layer.add(animation, forKey: nil) } //添加定时器 if recordingAnimationTimer == nil{ recordingAnimationTimer = Timer.scheduledTimer(timeInterval: self.animationDuration, target: self, selector: #selector(recordingButtonAnimation), userInfo: nil, repeats: true) } //销毁定时器 self.recordingAnimationTimer?.invalidate() //移除动画层 self.recordButton.layer.removeAllAnimations() 属性说明： duration动画时长，默认为0,不设置的话会快速执行完动画 speed 执行速度，默认</description>
    </item>
    
    <item>
      <title>透明度渐变动画</title>
      <link>https://IIHui.github.io/post/ios-opicity-animation/</link>
      <pubDate>Thu, 13 Dec 2018 10:50:31 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-opicity-animation/</guid>
      <description>CABasicAnimation关键帧动画 所谓关键帧动画，就是将Layer的属性作为KeyPath来注册，只要指定动画的起始帧和结束帧，然后自动计算和实现中间的过度的一种动画方式。 func recordingButtonAnimation(){ let animation = CABasicAnimation(keyPath: &amp;#34;opacity&amp;#34;) animation.fromValue = 1.0 animation.toValue = 0.3 animation.fillMode = kCAFillModeForwards animation.isRemovedOnCompletion = false animation.duration = self.animationDuration self.recordButton.layer.add(animation, forKey: nil) } //添加定时器 if recordingAnimationTimer == nil{ recordingAnimationTimer = Timer.scheduledTimer(timeInterval: self.animationDuration, target: self, selector: #selector(recordingButtonAnimation), userInfo: nil, repeats: true) } //销毁定时器 self.recordingAnimationTimer?.invalidate() //移除动画层 self.recordButton.layer.removeAllAnimations() 属性说明： duration动画时长，默认为0,不设置的话会快速执行完动画 speed 执行速度，默认</description>
    </item>
    
    <item>
      <title>Gif的播放与暂停</title>
      <link>https://IIHui.github.io/post/ios-gif/</link>
      <pubDate>Thu, 13 Dec 2018 08:25:45 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-gif/</guid>
      <description>Gif的播放有两种方式，一种是通过UIWebview；一种是通过UIImageView的方式。使用UIWebview的缺点是不可以暂停。 UIWebView import UIKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() guard let path = Bundle.main.path(forResource: &amp;#34;demo&amp;#34;, ofType:&amp;#34;gif&amp;#34;) else{ return } let url = URL(fileURLWithPath: path) do{ let gifData = try Data(contentsOf: url) let webView = UIWebView() webView.frame = CGRect(x: 0, y: 100, width: self.view.frame.width, height: 600) webView.scalesPageToFit = true webView.load(gifData, mimeType: &amp;#34;image/gif&amp;#34;, textEncodingName: String(), baseURL: NSURL() as URL) self.view.addSubview(webView) }catch{} } } UIImageView 使用UIImageView播放GIF有两个要点：一是从gif文件中获取图片数组，二是获取gif文件的播放时长。 import UIKit class ViewController: UIViewController { override func viewDidLoad() { super.viewDidLoad() let</description>
    </item>
    
    <item>
      <title>iOS视频开发入门</title>
      <link>https://IIHui.github.io/post/ios-video/</link>
      <pubDate>Wed, 12 Dec 2018 10:55:40 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/ios-video/</guid>
      <description>视频实质 纯粹的视频（不包括音频）实质上就是一组帧图片，经过视频编码成为视频(video)文件再把音频（audio）文件以及字幕文件组装在一起成为视频（movie）文件。 1秒内出现的图片数就是帧率，图片间隔越小画面就越流畅，所以帧率越高效果就越好，需要的存储空间也就越多。 录制视频的3种实现方式 UIImagePickerViewController：只能设置一些简单的参数来实现基本的视频录制的效果，自</description>
    </item>
    
    <item>
      <title>XCode快捷键</title>
      <link>https://IIHui.github.io/post/xcode-quick/</link>
      <pubDate>Tue, 27 Nov 2018 15:20:06 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/xcode-quick/</guid>
      <description>MAC键盘图标 ⌘——Command () ⌃ ——Control ⌥——Option (alt) ⇧——Shift ⇪——Caps Lock 快捷键 Command+R 运行 Command+B 编译 Command+. 停止 Command + Shift + K 清除工程 Command + K 清除控制台信息 Command + N 新建文件 Command + Shift + N 创建新工程 导航栏 Command+0~9 工程导航 Command + 0 快速打开实用面板 Command + 1 查看工程文件 Command + 2 版本控制导航 Command + 3 符号导航(类) Command + 4 警告和错误导航 Command + 5 测试导航 Command + 6 调试导航 Command + 7 断点导航 Command + 9 报告导航 Command + Option + 0 打开右侧导航</description>
    </item>
    
    <item>
      <title>OC 入门</title>
      <link>https://IIHui.github.io/post/oc-tour/</link>
      <pubDate>Wed, 19 Sep 2018 14:29:51 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/oc-tour/</guid>
      <description>Objective-C 是C语言的严格超集——任何C语言程序不经过修改都可以直接通过Objective-C的编译器，在Objective-C中使用C语言代码也是完全合法的。Objective-C被描述为覆盖在C语言上的一层，因为Objective-C的原意就是在C语言的主体上加入面向对象的特性。 文件扩展名 文件扩展名 类型和作用 .h 头文件，包含类，类型，函数和常数声明 .m 源代码文件，典型的源代码文件扩展名，可以包含OC和C代码</description>
    </item>
    
    <item>
      <title>swift中的方法</title>
      <link>https://IIHui.github.io/post/swift-method/</link>
      <pubDate>Fri, 14 Sep 2018 09:31:40 +0000</pubDate>
      
      <guid>https://IIHui.github.io/post/swift-method/</guid>
      <description>方法是关联了特定类型的函数。类，结构体，枚举类型都能定义实例方法，方法封装了给定类型特定的任务和功能。 实例方法 实例方法是属于特定实例（类实例、结构体实例或者枚举实例）的函数。实例方法只能在类型的具体实例里被调用，不能独立于实例而被调用。 class Counter { var count = 0 func increment() { count += 1 } func increment(by amount: Int) { count += amount } func reset() { count = 0 } } 异变方法 在Swift中结构体和枚举是值类型。默认情况下，值类型属性不能被自身的实例方法修改。如果需要改</description>
    </item>
    
  </channel>
</rss>